-- FreeFem++ v  3.620000 (date dom feb 10 20:50:27 CET 2019)
 Load: lg_fem lg_mesh lg_mesh3 eigenvalue 
    1 : // Keller-Segel
    2 : //
    3 : // * Solved using standard FE techiques, but mass lumpng
    4 : // * Matricies are mounted using "varf"
    5 : //
    6 : 
    7 : verbosity=0;
    8 : load "iovtk" load: iovtk 
;
    9 : load "qf11to25" // Para definir nuevas fórmulas de cuadratura
   10 : 
   11 : include "getARGV.idp" // for gestion of FreeFem++ argument and in version 3.10-1 FH
    2 :  // F. Hecht
    3 :  // Usage:  getARGV(n,defaultvalue) // get the fist used default valeu
    4 :  //  or     getARGV(after,defaultvalue) // get the arg after after
    5 :  // the type of delfaut value given the return type: int,double, string
    6 :  // Modif version 3.54-2  Jan 2018 (add ones include)
    7 : 
    8 : // Comentado por Rafa para que funcione en versiones < 3.54 (también maás abajo ENDIFMACRO)
    9 :  // IFMACRO(!getARGVidp)
   10 :  // macro getARGVidp 1 //
   11 : // Definido por Rafa para que funcione en versiones < 3.54
   12 : macro strtol(s) atoi(s)  )   atoi(s) // EOM
   13 : macro strtod(s) atof(s)  )   atof(s) // EOM
   14 : 
   15 : 
   16 :  func int usedARGV(int n)
   17 : {
   18 :   int k=1,ii=1,kk=1,ret=-1;
   19 :   for(int i=1;i<ARGV.n;++i)
   20 :    {
   21 :    // cout <<i<< " "<< ARGV[i] << " " <<(ARGV[i]=="-v") << " " << kk << "=="
   22 :    //      << n << " " << ARGV[i].rfind("dp") << " " <<ARGV[i].length-2  << endl;
   23 : 
   24 :        if(ARGV[i]=="-v") i++;
   25 :        else if(ARGV[i]=="-fglut") i++;
   26 :        else if(ARGV[i]=="-ffg") i++;
   27 :        else if(ARGV[i]=="-glut") i++;
   28 :        else if(ARGV[i]=="-f") i++;
   29 :        else if(ARGV[i]=="-nw") ii;
   30 :        else if(ARGV[i]=="-wait") ii;
   31 :        else if(ARGV[i]=="-ne") ii;
   32 :        else if(ARGV[i]=="-cd") ii;
   33 :        //else if(ARGV[i].rfind(".edp")==ARGV[i].length-4 ) ii;
   34 :        else if(i==1) ii;
   35 :        else if(kk++==n) {ret=i;}
   36 :       // else cout << " +++ \n";
   37 :      }
   38 :    //  cout << ret << endl;
   39 :     return ret;
   40 : }
   41 : 
   42 : func int usedARGV(string after)
   43 : {
   44 :   int ret=-1;
   45 :   for(int i=ARGV.n-1;i>=0;--i)
   46 :        if(ARGV[i]==after) { ret=++i; break;}
   47 :   if(ARGV.n<ret) ret=-1;
   48 :   return ret;
   49 : }
   50 : 
   51 : func int getARGV(int n,int default)
   52 : {
   53 :    int d=default;
   54 :    int k=usedARGV(n);
   55 :    if(k>0) d=strtol(ARGV[k])   atoi(ARGV[k]) ;
   56 :     return d;
   57 : }
   58 : func real getARGV(int n,real default)
   59 : {
   60 :    real d=default;
   61 :    int k=usedARGV(n);
   62 :    if(k>0) d=strtod(ARGV[k])   atof(ARGV[k]) ;
   63 :    return d;
   64 : }
   65 : func string getARGV(int n,string default)
   66 : {
   67 :    string d=default;
   68 :    int k=usedARGV(n);
   69 :    if(k>0) d=ARGV[k];
   70 :     return d;
   71 : }
   72 : 
   73 : func int getARGV(string after,int default)
   74 : {
   75 :    int d=default;
   76 :    int k=usedARGV(after);
   77 :    if(k>0) d=strtol(ARGV[k])   atoi(ARGV[k]) ;
   78 :     return d;
   79 : }
   80 : func real getARGV(string after,real default)
   81 : {
   82 :    real d=default;
   83 :    int k=usedARGV(after);
   84 :    if(k>0) d=strtod(ARGV[k])   atof(ARGV[k]) ;
   85 :    return d;
   86 : }
   87 : func string getARGV(string after,string default)
   88 : {
   89 :    string d=default;
   90 :    int k=usedARGV(after);
   91 :    if(k>0) d=ARGV[k];
   92 :     return d;
   93 : }
   94 : 
   95 : /*
   96 : cout << getARGV(1,100) << endl;
   97 : cout << getARGV(2,200.) << endl;
   98 : cout << getARGV(3,"300.000") << endl;
   99 : cout << getARGV("-n"," xxx") << endl;
  100 : */
  101 : 
  102 : // Comentado por Rafa para que funcione en versiones < 3.54
  103 : // ENDIFMACRO
  104 : ; // Functions to read arguments from command line
   12 : 
   13 : //,---------------------------------------------------------------------
   14 : //| Keller-Segel data
   15 : //`---------------------------------------------------------------------
   16 : int nx = getARGV("-nx", 50); // Default: nx=50
   17 : int acuteMesh = getARGV("-acute", 1);
   18 : mesh Th;
   19 : if(acuteMesh) {
   20 :   string meshDir = "meshes/";
   21 :   string meshFile= meshDir + "acute_mesh_" + nx + "x" + nx + "_[-0.5,0.5]^2.msh";
   22 :   cout << "Reading mesh from " << meshFile << endl;
   23 :   Th=readmesh(meshFile);
   24 :  }
   25 :  else {
   26 :    Th=square(nx, nx, [x-0.5, y-0.5]);
   27 :  }
   28 : 
   29 : //>> Paremeters from G. Viglialoro et al....
   30 : // int nx=20
   31 : // mesh Th = square(nx, nx, [4*x-2, 4*y-2]);
   32 : // real k0=1, k1=0.2, k2=1, k3=0.1, k4=1;
   33 : // u0 = 1.15*exp(-x^2-y^2)*(4-x^2)^2*(4-y^2)^2;
   34 : // v0 = 0.55*exp(-x^2-y^2)*(4-x^2)^2*(4-y^2)^2;
   35 : 
   36 : //>> Parameters from Y. Epshteyn & A. Kurganov...
   37 : //>> Blow-up expected at t = 1.21·10^{−4}
   38 : // int nx = 50; // Also nx=101
   39 : // mesh Th = square(nx, nx, [ x-0.5, y-0.5 ]);
   40 : real k0 = getARGV("-k0", 1);
   41 : real k1 = getARGV("-k1", 1);
   42 : real k2 = getARGV("-k2", 1);
   43 : real k3 = getARGV("-k3", 1);
   44 : real k4 = getARGV("-k4", 1);
   45 : real cteU0 = getARGV("-cu0", 1000);
   46 : real cteV0 = getARGV("-cv0", 500);
   47 : func uInitCond = cteU0*exp(-0.1*cteU0*(x^2+y^2));
   48 : func vInitCond = cteV0*exp(-0.1*cteV0*(x^2+y^2));
   49 : 
   50 : // Finite elements
   51 : fespace Uh(Th, P1);
   52 : Uh u, ub; // Unknown and test function
   53 : Uh u0;
   54 : fespace Vh(Th, P1);
   55 : Vh v, vb, v0;
   56 : 
   57 : //,---------------------------------------------------------------------
   58 : //| Time parameters
   59 : //`---------------------------------------------------------------------
   60 : real t = 0;
   61 : int niter = getARGV("-nt", 200);
   62 : real dt = getARGV("-dt", 1.e-6);
   63 : 
   64 : u0 = uInitCond;
   65 : v0 = vInitCond;
   66 : 
   67 : cout << "M'aximos y m'inimos de los datos iniciales:" << endl;
   68 : {
   69 :   u=u0; v=v0;
   70 :   real uMax = u[].max; real uMin=u[].min;
   71 :   real vMax = v[].max; real vMin=v[].min;
   72 :   cout << "  max(u) = " << uMax << "  min(u) = " << uMin
   73 :        << (uMin<0 ? " ...---... Positivity broken!!!" : "") << endl;
   74 :   cout << "  max(v) = " << vMax << "  min(v) = " << vMin
   75 :        << (vMin<0 ? " ...---... (V) Positivity broken!!!" : "") << endl;
   76 : }
   77 : real integralU0=int2d(Th)(u0);
   78 : cout <<"La integral del dato inicial es "<< integralU0 <<
   79 :   " (4*pi=" << 4*pi << ")" << endl;
   80 : cout << "Condici'on CFL: dt = " << dt << ", h ~ " << (1./nx) <<
   81 :   ", k/h ~ " << dt/(1./nx) << ", k/h^2 ~ " << dt/(1./nx)^2 << endl;
   82 : string testName = "KS_" +
   83 :   "dt=" + dt + "_nx=" + nx +
   84 :   "_k0=" + k0 + "_k1=" + k1 + "_k2=" + k2 + "_k3=" + k3 + "_k4=" + k4;
   85 : cout << "Running test " << testName << endl;
   86 : 
   87 : //,---------------------------------------------------------------------
   88 : //| Variational problems
   89 : //`---------------------------------------------------------------------
   90 : 
   91 : // Macros..............................................................>
   92 : macro grad(u) [ dx(u), dy(u) ]  )   [ dx(u), dy(u) ] // End of Macro
   93 :   ; // for emacs :)
   94 : macro div(u,v) ( dx(u) + dy(v) )  )   ( dx(u) + dy(v) ) // End of Macro
   95 :   ; // for emacs :)
   96 : 
   97 : 
   98 : // Quadrature formulae..................................................>
   99 : // real[int,int] qfDataBaryc=[ // w_i, x_baric_i, y_baric_i
  100 : //                              [1.,  1./3, 1./3] ];
  101 : real[int,int] qfDataNoBaryc=[ // w_i, x_baric_i, y_baric_i
  102 :                              [1.,  1./4, 1./4] ];
  103 : 
  104 : QF2 qfSpecial(1, qfDataNoBaryc);
  105 : 
  106 : // int barycenterQF = getARGV("-qfbaryc", 0);
  107 : // QF2 qfBaryc  (1, qfDataBaryc);
  108 : // QF2 qfNoBaryc(1, qfDataNoBaryc);
  109 : // QF2 qfSpecial;
  110 : // if(barycenterQF) {
  111 : //   qfSpecial = qfBaryc;
  112 : //  }
  113 : //  else {
  114 : //   qfSpecial = qfNoBaryc;
  115 : //  }
  116 : 
  117 : // macro specialQuadOptions qft=qfSpecial // EOM
  118 : macro specialQuadOptions qforder=2 qforder=2 // EOM
  119 : 
  120 : problem KellerSegelU(u,ub)=
  121 :   int2d(Th, qft=qf1pTlump)( u*ub ) +
  122 :   int2d(Th)( dt*k0 * grad(u)      [ dx(u), dy(u) ] '*grad(ub)      [ dx(ub), dy(ub) ]  ) +
  123 :   int2d(Th, specialQuadOptions qforder=2 )( -dt*k1 * u*grad(v0)      [ dx(v0), dy(v0) ] '*grad(ub)      [ dx(ub), dy(ub) ]  )
  124 :   - int2d(Th, qft=qf1pTlump)( u0*ub )
  125 :   ;
  126 : problem KellerSegelV(v,vb)=
  127 :   int2d(Th, qft=qf1pTlump )( v*vb ) +
  128 :   int2d(Th)( dt*k2 * grad(v)      [ dx(v), dy(v) ] '*grad(vb)      [ dx(vb), dy(vb) ]  + dt*k3 * v*vb )
  129 :   - int2d(Th)( dt*k4 * u*vb )
  130 :   - int2d(Th, qft=qf1pTlump)( v0*vb )
  131 :   ;
  132 : 
  133 : 
  134 : // Linear form for variational formulation of convection
  135 : // varf varfConvectThetaSchemeDG(unused,ub) =
  136 : //   int2d(Th)(u0*ub/dt)
  137 : //   + aUPW( -(1-theta), b, u0, ub ); // - aUPW in RHS
  138 : 
  139 : // Bilinear form for mass matrix
  140 : varf varfMassLump(u,ub) =
  141 :   int2d(Th, qft=qf1pTlump) (u*ub);
  142 : 
  143 : // Bilinear form for diffusion stiffness matrix
  144 : varf varfDiffusion(u,ub) =
  145 :   int2d(Th) ( grad(u)      [ dx(u), dy(u) ] '*grad(ub)      [ dx(ub), dy(ub) ]  );
  146 : 
  147 : // Bilinear form for chemotaxis
  148 : // We use a special quadrature formula, so that u is evaluated
  149 : // on an specific point, whose barycentric coords are (1/4,1/4,1/2)
  150 : 
  151 : varf varfChemotaxisExplicitV(u,ub)=
  152 :   int2d(Th, specialQuadOptions qforder=2 )( -u*grad(v0)      [ dx(v0), dy(v0) ] '*grad(ub)      [ dx(ub), dy(ub) ]  );
  153 : 
  154 : 
  155 : NewMacro BuildSystemU
  156 : //----------------------------------------------------------------------
  157 : // 1.a Define matrix
  158 : matrix Mu = varfMassLump(Uh, Uh);  // Mass matrix
matrix Ku = varfDiffusion(Uh,Uh);  // Diffusion matrix
matrix Cu = varfChemotaxisExplicitV(Uh,Uh);
  159 # matrix Au = Mu + dt*k0*Ku + dt*k1*Cu;
  160 # set(Au, solver=UMFPACK);
  161 # 
  162 # // 1.b Define RHS
real[int] Fu = Mu*u0[];
  163 # //----------------------------------------------------------------------
  164 # EndMacromatrix Mu = varfMassLump(Uh, Uh);  // Mass matrix
  165 : matrix Ku = varfDiffusion(Uh,Uh);  // Diffusion matrix
  166 : matrix Cu = varfChemotaxisExplicitV(Uh,Uh);
  167 : matrix Au = Mu + dt*k0*Ku + dt*k1*Cu;
  168 : set(Au, solver=UMFPACK);
  169 : 
  170 : // 1.b Define RHS
  171 : real[int] Fu = Mu*u0[];
  172 : //----------------------------------------------------------------------
  173 : 
  174 : 
  175 : NewMacro BuildSystemV
  176 : //----------------------------------------------------------------------
  177 : // 2.a Define matrix
  178 : matrix Av = (1 + dt*k3)*Mu + dt*k2*Ku; // Assuming Uh == Vh
set(Av, solver=UMFPACK);
  179 # 
  180 # // 2.b Define RHS
real[int] vAux= dt*k4*u[] + v0[]; // Assuming dim(Uh) == dim(Vh)
  181 # real[int] Fv = Mu*vAux; // Assuming Uh == Vh
//----------------------------------------------------------------------
  182 # EndMacromatrix Av = (1 + dt*k3)*Mu + dt*k2*Ku; // Assuming Uh == Vh
  183 : set(Av, solver=UMFPACK);
  184 : 
  185 : // 2.b Define RHS
  186 : real[int] vAux= dt*k4*u[] + v0[]; // Assuming dim(Uh) == dim(Vh)
  187 : real[int] Fv = Mu*vAux; // Assuming Uh == Vh
  188 : //----------------------------------------------------------------------
  189 : 
  190 : 
  191 : //,---------------------------------------------------------------------
  192 : //| Time loop
  193 : //`---------------------------------------------------------------------
  194 : 
  195 : 
  196 : real uMax = 0, vMax=0;
  197 : real blowUpTolerance=1.e+10;
  198 : 
  199 : for (int k=1; k<=niter && uMax<blowUpTolerance && vMax<blowUpTolerance; k++) {
  200 :   t=t+dt;
  201 :   cout << "iter = " << k << "	 (t = " << t << ")" << endl;
  202 :   cout << "  number of vertices: " << Th.nv << endl;
  203 :   bool buildMatrixSystem = false;
  204 :   if(buildMatrixSystem) {
  205 :     // 1) Compute u (live organism density) >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
  206 :     BuildSystemU      // Mass matrix
  159 :      // Diffusion matrix
  160 :    
  161 :        
  162 :  
  163 : 
  164 : // 1.b Define RHS
  165 :    
  166 : //----------------------------------------------------------------------
  167 : matrix Mu = varfMassLump(Uh, Uh);  // Mass matrix
  159 : matrix Ku = varfDiffusion(Uh,Uh);  // Diffusion matrix
  160 : matrix Cu = varfChemotaxisExplicitV(Uh,Uh);
  161 : matrix Au = Mu + dt*k0*Ku + dt*k1*Cu;
  162 : set(Au, solver=UMFPACK);
  163 : 
  164 : // 1.b Define RHS
  165 : real[int] Fu = Mu*u0[];
  166 : //----------------------------------------------------------------------
  167 : 
  207 :     u[] = Au^-1*Fu;
  208 : 
  209 :     // 2) Compute v (chemoattractant density) >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
  210 :     BuildSystemV        // Assuming Uh == Vh
  179 :  
  180 : 
  181 : // 2.b Define RHS
  182 :      // Assuming dim(Uh) == dim(Vh)
  183 :     // Assuming Uh == Vh
  184 : //----------------------------------------------------------------------
  185 : matrix Av = (1 + dt*k3)*Mu + dt*k2*Ku; // Assuming Uh == Vh
  179 : set(Av, solver=UMFPACK);
  180 : 
  181 : // 2.b Define RHS
  182 : real[int] vAux= dt*k4*u[] + v0[]; // Assuming dim(Uh) == dim(Vh)
  183 : real[int] Fv = Mu*vAux; // Assuming Uh == Vh
  184 : //----------------------------------------------------------------------
  185 : 
  211 :     v[] = Av^-1*Fv;
  212 : 
  213 :   }
  214 : 
  215 :   else {
  216 :     // Solve system for u ······················································
  217 :     KellerSegelU;   // Compute u
  218 : 
  219 :     // Solve system for v ······················································
  220 :     KellerSegelV;   // Compute v
  221 :   }
  222 : 
  223 :   // Post-process ····························································
  224 : 
  225 :   uMax = u[].max; real uMin=u[].min;
  226 :   vMax = v[].max; real vMin=v[].min;
  227 :   cout << "  max(u) = " << uMax << "  min(u) = " << uMin
  228 :        << (uMin<0 ? " ...---... Positivity broken!!!" : "") << endl;
  229 :   cout << "  max(v) = " << vMax << "  min(v) = " << vMin
  230 :        << (vMin<0 ? " ...---... (V) Positivity broken!!!" : "") << endl;
  231 :   real uInt = int2d(Th)(u); real vInt = int2d(Th)(v);
  232 :   cout << "  int_Th(u) = " << uInt << "  int_Th(v) = " << vInt << endl;
  233 : 
  234 :   plot(v, value=1, fill=1, dim=3);
  235 :   bool adaptMesh=true; if(adaptMesh) {
  236 :     Th = adaptmesh(Th, v, err=0.001, nbvx=500*nx*nx);
  237 :     plot(Th, wait=1);
  238 :   }
  239 :   // plot(Th, wait=1, ps="mesh_" + k + ".eps");
  240 : 
  241 :   bool plotToVTK=true; if(plotToVTK) {
  242 :     string vtkFile="/tmp/" + testName + "_" + k + ".vtk";
  243 :     int[int] vtkOrder=[0];
  244 :     cout << "Saving " << vtkFile << endl;
  245 :     savevtk(vtkFile, Th, u, v, dataname="u v", order=vtkOrder);
  246 :   }
  247 : 
  248 :   // Prepare next iteration
  249 :   u0 = u;
  250 :   v0 = v;
  251 : 
  252 :  }
  253 : 
  254 : if(uMax>=blowUpTolerance) cout << ">>>>> BLOW-UP FOUND at t = " << t
  255 : 			       << " (uMax = " << uMax << ", blow-up tolerance = "
  256 : 			       << blowUpTolerance << ")" << endl;
  257 :  sizestack + 1024 =7736  ( 6712 )

Reading mesh from meshes/acute_mesh_50x50_[-0.5,0.5]^2.msh
M'aximos y m'inimos de los datos iniciales:
  max(u) = 1000  min(u) = 1.92875e-19
  max(v) = 500  min(v) = 6.94397e-09
La integral del dato inicial es 31.4159 (4*pi=12.5664)
Condici'on CFL: dt = 1e-06, h ~ 0.02, k/h ~ 5e-05, k/h^2 ~ 0.0025
Running test KS_dt=1e-06_nx=50_k0=1_k1=1_k2=1_k3=1_k4=1
 d= 2T Ordre= 1 d!k!/(d+k)!= 0.333333 0.25 0.25 0.5  err= 0.166667
Erreur dans la formule d'integration d=2 exact = 1 Nb Point = 1
iter = 1	 (t = 1e-06)
  number of vertices: 17701
  max(u) = 1116.06  min(u) = 2.09103e-19
  max(v) = 499.913  min(v) = 7.14269e-09
  int_Th(u) = 31.4159  int_Th(v) = 31.4159
Saving /tmp/KS_dt=1e-06_nx=50_k0=1_k1=1_k2=1_k3=1_k4=1_1.vtk
iter = 2	 (t = 2e-06)
  number of vertices: 30435
  max(u) = 1379.94  min(u) = 2.2558e-19
  max(v) = 499.695  min(v) = 7.3401e-09
  int_Th(u) = 31.4159  int_Th(v) = 31.4159
Saving /tmp/KS_dt=1e-06_nx=50_k0=1_k1=1_k2=1_k3=1_k4=1_2.vtk
iter = 3	 (t = 3e-06)
  number of vertices: 39237
  max(u) = 1591.21  min(u) = 2.42314e-19
  max(v) = 499.5  min(v) = 7.53623e-09
  int_Th(u) = 31.5482  int_Th(v) = 31.4158
Saving /tmp/KS_dt=1e-06_nx=50_k0=1_k1=1_k2=1_k3=1_k4=1_3.vtk
iter = 4	 (t = 4e-06)
  number of vertices: 40641
  max(u) = 1749.5  min(u) = 2.59312e-19
  max(v) = 499.341  min(v) = 7.73111e-09
  int_Th(u) = 31.651  int_Th(v) = 31.4157
Saving /tmp/KS_dt=1e-06_nx=50_k0=1_k1=1_k2=1_k3=1_k4=1_4.vtk
iter = 5	 (t = 5e-06)
  number of vertices: 39457
  max(u) = 1896.66  min(u) = 2.76582e-19
  max(v) = 499.206  min(v) = 7.92476e-09
  int_Th(u) = 31.7468  int_Th(v) = 31.4157
Saving /tmp/KS_dt=1e-06_nx=50_k0=1_k1=1_k2=1_k3=1_k4=1_5.vtk
iter = 6	 (t = 6e-06)
  number of vertices: 38362
  max(u) = 2099.11  min(u) = 2.9413e-19
  max(v) = 499.065  min(v) = 8.11721e-09
  int_Th(u) = 31.8134  int_Th(v) = 31.4157
Saving /tmp/KS_dt=1e-06_nx=50_k0=1_k1=1_k2=1_k3=1_k4=1_6.vtk
iter = 7	 (t = 7e-06)
  number of vertices: 38067
  max(u) = 2267.11  min(u) = 3.11966e-19
  max(v) = 498.946  min(v) = 8.30851e-09
  int_Th(u) = 31.8794  int_Th(v) = 31.4157
Saving /tmp/KS_dt=1e-06_nx=50_k0=1_k1=1_k2=1_k3=1_k4=1_7.vtk
iter = 8	 (t = 8e-06)
  number of vertices: 37657
  max(u) = 2505.66  min(u) = 3.30098e-19
  max(v) = 498.823  min(v) = 8.49868e-09
  int_Th(u) = 31.9334  int_Th(v) = 31.4157
Saving /tmp/KS_dt=1e-06_nx=50_k0=1_k1=1_k2=1_k3=1_k4=1_8.vtk
iter = 9	 (t = 9e-06)
  number of vertices: 37618
  max(u) = 2738.64  min(u) = 3.48534e-19
  max(v) = 498.715  min(v) = 8.68777e-09
  int_Th(u) = 31.9852  int_Th(v) = 31.4156
Saving /tmp/KS_dt=1e-06_nx=50_k0=1_k1=1_k2=1_k3=1_k4=1_9.vtk
iter = 10	 (t = 1e-05)
  number of vertices: 37370
  max(u) = 3017.26  min(u) = 3.67282e-19
  max(v) = 498.601  min(v) = 8.8758e-09
  int_Th(u) = 32.0371  int_Th(v) = 31.4156
Saving /tmp/KS_dt=1e-06_nx=50_k0=1_k1=1_k2=1_k3=1_k4=1_10.vtk
iter = 11	 (t = 1.1e-05)
  number of vertices: 37480
  max(u) = 3299.78  min(u) = 3.86351e-19
  max(v) = 498.497  min(v) = 9.06281e-09
  int_Th(u) = 32.0844  int_Th(v) = 31.4156
Saving /tmp/KS_dt=1e-06_nx=50_k0=1_k1=1_k2=1_k3=1_k4=1_11.vtk
iter = 12	 (t = 1.2e-05)
  number of vertices: 37254
  max(u) = 3632.83  min(u) = 4.05751e-19
  max(v) = 498.389  min(v) = 9.24884e-09
  int_Th(u) = 32.1297  int_Th(v) = 31.4155
Saving /tmp/KS_dt=1e-06_nx=50_k0=1_k1=1_k2=1_k3=1_k4=1_12.vtk
iter = 13	 (t = 1.3e-05)
  number of vertices: 37202
  max(u) = 3976.67  min(u) = 4.2549e-19
  max(v) = 498.289  min(v) = 9.43394e-09
  int_Th(u) = 32.1802  int_Th(v) = 31.4155
Saving /tmp/KS_dt=1e-06_nx=50_k0=1_k1=1_k2=1_k3=1_k4=1_13.vtk
iter = 14	 (t = 1.4e-05)
  number of vertices: 37051
  max(u) = 4382.01  min(u) = 4.45578e-19
  max(v) = 498.184  min(v) = 9.61813e-09
  int_Th(u) = 32.2251  int_Th(v) = 31.4155
Saving /tmp/KS_dt=1e-06_nx=50_k0=1_k1=1_k2=1_k3=1_k4=1_14.vtk
iter = 15	 (t = 1.5e-05)
  number of vertices: 37179
  max(u) = 4786.02  min(u) = 4.66023e-19
  max(v) = 498.087  min(v) = 9.80146e-09
  int_Th(u) = 32.2725  int_Th(v) = 31.4154
Saving /tmp/KS_dt=1e-06_nx=50_k0=1_k1=1_k2=1_k3=1_k4=1_15.vtk
iter = 16	 (t = 1.6e-05)
  number of vertices: 36990
  max(u) = 5286.73  min(u) = 4.86836e-19
  max(v) = 497.984  min(v) = 9.98395e-09
  int_Th(u) = 32.3197  int_Th(v) = 31.4153
Saving /tmp/KS_dt=1e-06_nx=50_k0=1_k1=1_k2=1_k3=1_k4=1_16.vtk
iter = 17	 (t = 1.7e-05)
  number of vertices: 37024
  max(u) = 5813.37  min(u) = 5.08026e-19
  max(v) = 497.889  min(v) = 1.01657e-08
  int_Th(u) = 32.3654  int_Th(v) = 31.4153
Saving /tmp/KS_dt=1e-06_nx=50_k0=1_k1=1_k2=1_k3=1_k4=1_17.vtk
iter = 18	 (t = 1.8e-05)
  number of vertices: 36940
  max(u) = 6396.66  min(u) = 5.29603e-19
  max(v) = 497.796  min(v) = 1.03466e-08
  int_Th(u) = 32.4141  int_Th(v) = 31.4153
Saving /tmp/KS_dt=1e-06_nx=50_k0=1_k1=1_k2=1_k3=1_k4=1_18.vtk
iter = 19	 (t = 1.9e-05)
  number of vertices: 37032
  max(u) = 7100.78  min(u) = 5.51577e-19
  max(v) = 497.694  min(v) = 1.05268e-08
  int_Th(u) = 32.4649  int_Th(v) = 31.4152
Saving /tmp/KS_dt=1e-06_nx=50_k0=1_k1=1_k2=1_k3=1_k4=1_19.vtk
iter = 20	 (t = 2e-05)
  number of vertices: 36913
  max(u) = 7809.36  min(u) = 5.73957e-19
  max(v) = 497.601  min(v) = 1.07064e-08
  int_Th(u) = 32.5158  int_Th(v) = 31.4151
Saving /tmp/KS_dt=1e-06_nx=50_k0=1_k1=1_k2=1_k3=1_k4=1_20.vtk
iter = 21	 (t = 2.1e-05)
  number of vertices: 36975
  max(u) = 8647.14  min(u) = 5.96755e-19
  max(v) = 497.502  min(v) = 1.08853e-08
  int_Th(u) = 32.566  int_Th(v) = 31.4151
Saving /tmp/KS_dt=1e-06_nx=50_k0=1_k1=1_k2=1_k3=1_k4=1_21.vtk
iter = 22	 (t = 2.2e-05)
  number of vertices: 36778
  max(u) = 9497.09  min(u) = 6.1998e-19
  max(v) = 497.41  min(v) = 1.10636e-08
  int_Th(u) = 32.6189  int_Th(v) = 31.415
Saving /tmp/KS_dt=1e-06_nx=50_k0=1_k1=1_k2=1_k3=1_k4=1_22.vtk
iter = 23	 (t = 2.3e-05)
  number of vertices: 36887
  max(u) = 10426.1  min(u) = 6.43642e-19
  max(v) = 497.32  min(v) = 1.12413e-08
  int_Th(u) = 32.6693  int_Th(v) = 31.415
Saving /tmp/KS_dt=1e-06_nx=50_k0=1_k1=1_k2=1_k3=1_k4=1_23.vtk
iter = 24	 (t = 2.4e-05)
  number of vertices: 36943
  max(u) = 11531.9  min(u) = 6.67754e-19
  max(v) = 497.223  min(v) = 1.14185e-08
  int_Th(u) = 32.7227  int_Th(v) = 31.4149
Saving /tmp/KS_dt=1e-06_nx=50_k0=1_k1=1_k2=1_k3=1_k4=1_24.vtk
iter = 25	 (t = 2.5e-05)
  number of vertices: 36905
  max(u) = 12644.5  min(u) = 6.92324e-19
  max(v) = 497.134  min(v) = 1.15952e-08
  int_Th(u) = 32.7757  int_Th(v) = 31.4148
Saving /tmp/KS_dt=1e-06_nx=50_k0=1_k1=1_k2=1_k3=1_k4=1_25.vtk
iter = 26	 (t = 2.6e-05)
  number of vertices: 36838
  max(u) = 13938  min(u) = 7.17365e-19
  max(v) = 497.039  min(v) = 1.17714e-08
  int_Th(u) = 32.8303  int_Th(v) = 31.4148
Saving /tmp/KS_dt=1e-06_nx=50_k0=1_k1=1_k2=1_k3=1_k4=1_26.vtk
iter = 27	 (t = 2.7e-05)
  number of vertices: 36937
  max(u) = 15237.6  min(u) = 7.42887e-19
  max(v) = 496.952  min(v) = 1.19471e-08
  int_Th(u) = 32.8855  int_Th(v) = 31.4147
Saving /tmp/KS_dt=1e-06_nx=50_k0=1_k1=1_k2=1_k3=1_k4=1_27.vtk
iter = 28	 (t = 2.8e-05)
  number of vertices: 36795
  max(u) = 16648.1  min(u) = 7.68902e-19
  max(v) = 496.867  min(v) = 1.21224e-08
  int_Th(u) = 32.9352  int_Th(v) = 31.4147
Saving /tmp/KS_dt=1e-06_nx=50_k0=1_k1=1_k2=1_k3=1_k4=1_28.vtk
iter = 29	 (t = 2.9e-05)
  number of vertices: 36910
  max(u) = 18313.8  min(u) = 7.9542e-19
  max(v) = 496.775  min(v) = 1.22974e-08
  int_Th(u) = 32.9907  int_Th(v) = 31.4146
Saving /tmp/KS_dt=1e-06_nx=50_k0=1_k1=1_k2=1_k3=1_k4=1_29.vtk
iter = 30	 (t = 3e-05)
  number of vertices: 36753
  max(u) = 19957.7  min(u) = 8.22454e-19
  max(v) = 496.692  min(v) = 1.2472e-08
  int_Th(u) = 33.0407  int_Th(v) = 31.4145
Saving /tmp/KS_dt=1e-06_nx=50_k0=1_k1=1_k2=1_k3=1_k4=1_30.vtk
iter = 31	 (t = 3.1e-05)
  number of vertices: 36907
  max(u) = 21877.2  min(u) = 8.50015e-19
  max(v) = 496.603  min(v) = 1.26462e-08
  int_Th(u) = 33.0913  int_Th(v) = 31.4145
Saving /tmp/KS_dt=1e-06_nx=50_k0=1_k1=1_k2=1_k3=1_k4=1_31.vtk
iter = 32	 (t = 3.2e-05)
  number of vertices: 36738
  max(u) = 23773.9  min(u) = 8.78115e-19
  max(v) = 496.523  min(v) = 1.28202e-08
  int_Th(u) = 33.1411  int_Th(v) = 31.4144
Saving /tmp/KS_dt=1e-06_nx=50_k0=1_k1=1_k2=1_k3=1_k4=1_32.vtk
iter = 33	 (t = 3.3e-05)
  number of vertices: 36851
  max(u) = 25834.2  min(u) = 9.06766e-19
  max(v) = 496.445  min(v) = 1.29939e-08
  int_Th(u) = 33.1816  int_Th(v) = 31.4144
Saving /tmp/KS_dt=1e-06_nx=50_k0=1_k1=1_k2=1_k3=1_k4=1_33.vtk
iter = 34	 (t = 3.4e-05)
  number of vertices: 36765
  max(u) = 28224.1  min(u) = 9.35981e-19
  max(v) = 496.361  min(v) = 1.31674e-08
  int_Th(u) = 33.2288  int_Th(v) = 31.4143
Saving /tmp/KS_dt=1e-06_nx=50_k0=1_k1=1_k2=1_k3=1_k4=1_34.vtk
iter = 35	 (t = 3.5e-05)
  number of vertices: 36765
  max(u) = 30559.5  min(u) = 9.65771e-19
  max(v) = 496.285  min(v) = 1.33406e-08
  int_Th(u) = 33.2765  int_Th(v) = 31.4142
Saving /tmp/KS_dt=1e-06_nx=50_k0=1_k1=1_k2=1_k3=1_k4=1_35.vtk
iter = 36	 (t = 3.6e-05)
  number of vertices: 36796
  max(u) = 33266.5  min(u) = 9.9615e-19
  max(v) = 496.205  min(v) = 1.35137e-08
  int_Th(u) = 33.3241  int_Th(v) = 31.4142
Saving /tmp/KS_dt=1e-06_nx=50_k0=1_k1=1_k2=1_k3=1_k4=1_36.vtk
iter = 37	 (t = 3.7e-05)
  number of vertices: 36811
  max(u) = 35912.6  min(u) = 1.02713e-18
  max(v) = 496.134  min(v) = 1.36866e-08
  int_Th(u) = 33.3705  int_Th(v) = 31.4141
Saving /tmp/KS_dt=1e-06_nx=50_k0=1_k1=1_k2=1_k3=1_k4=1_37.vtk
iter = 38	 (t = 3.8e-05)
  number of vertices: 36728
  max(u) = 38977.5  min(u) = 1.05872e-18
  max(v) = 496.058  min(v) = 1.38594e-08
  int_Th(u) = 33.4227  int_Th(v) = 31.4141
Saving /tmp/KS_dt=1e-06_nx=50_k0=1_k1=1_k2=1_k3=1_k4=1_38.vtk
iter = 39	 (t = 3.9e-05)
  number of vertices: 36792
  max(u) = 41955.4  min(u) = 1.09095e-18
  max(v) = 495.991  min(v) = 1.4032e-08
  int_Th(u) = 33.4703  int_Th(v) = 31.414
Saving /tmp/KS_dt=1e-06_nx=50_k0=1_k1=1_k2=1_k3=1_k4=1_39.vtk
iter = 40	 (t = 4e-05)
  number of vertices: 36787
  max(u) = 45409.9  min(u) = 1.12381e-18
  max(v) = 495.919  min(v) = 1.42046e-08
  int_Th(u) = 33.5202  int_Th(v) = 31.4139
Saving /tmp/KS_dt=1e-06_nx=50_k0=1_k1=1_k2=1_k3=1_k4=1_40.vtk
iter = 41	 (t = 4.1e-05)
  number of vertices: 36726
  max(u) = 48753  min(u) = 1.15733e-18
  max(v) = 495.857  min(v) = 1.43771e-08
  int_Th(u) = 33.5679  int_Th(v) = 31.4139
Saving /tmp/KS_dt=1e-06_nx=50_k0=1_k1=1_k2=1_k3=1_k4=1_41.vtk
iter = 42	 (t = 4.2e-05)
  number of vertices: 36678
  max(u) = 52631.6  min(u) = 1.19151e-18
  max(v) = 495.79  min(v) = 1.45495e-08
  int_Th(u) = 33.6094  int_Th(v) = 31.4138
Saving /tmp/KS_dt=1e-06_nx=50_k0=1_k1=1_k2=1_k3=1_k4=1_42.vtk
iter = 43	 (t = 4.3e-05)
  number of vertices: 36776
  max(u) = 56367.7  min(u) = 1.22638e-18
  max(v) = 495.731  min(v) = 1.4722e-08
  int_Th(u) = 33.6724  int_Th(v) = 31.4137
Saving /tmp/KS_dt=1e-06_nx=50_k0=1_k1=1_k2=1_k3=1_k4=1_43.vtk
iter = 44	 (t = 4.4e-05)
  number of vertices: 36593
  max(u) = 60698.9  min(u) = 1.26194e-18
  max(v) = 495.669  min(v) = 1.48944e-08
  int_Th(u) = 33.7249  int_Th(v) = 31.4137
Saving /tmp/KS_dt=1e-06_nx=50_k0=1_k1=1_k2=1_k3=1_k4=1_44.vtk
iter = 45	 (t = 4.5e-05)
  number of vertices: 36811
  max(u) = 64855.1  min(u) = 1.29822e-18
  max(v) = 495.616  min(v) = 1.50669e-08
  int_Th(u) = 33.7747  int_Th(v) = 31.4136
Saving /tmp/KS_dt=1e-06_nx=50_k0=1_k1=1_k2=1_k3=1_k4=1_45.vtk
iter = 46	 (t = 4.6e-05)
  number of vertices: 36680
  max(u) = 69658.7  min(u) = 1.33522e-18
  max(v) = 495.559  min(v) = 1.52394e-08
  int_Th(u) = 33.8257  int_Th(v) = 31.4135
Saving /tmp/KS_dt=1e-06_nx=50_k0=1_k1=1_k2=1_k3=1_k4=1_46.vtk
iter = 47	 (t = 4.7e-05)
  number of vertices: 36763
  max(u) = 74060.1  min(u) = 1.37296e-18
  max(v) = 495.514  min(v) = 1.54119e-08
  int_Th(u) = 33.8904  int_Th(v) = 31.4135
Saving /tmp/KS_dt=1e-06_nx=50_k0=1_k1=1_k2=1_k3=1_k4=1_47.vtk
iter = 48	 (t = 4.8e-05)
  number of vertices: 36767
  max(u) = 79505.3  min(u) = 1.41146e-18
  max(v) = 495.461  min(v) = 1.55846e-08
  int_Th(u) = 33.9304  int_Th(v) = 31.4134
Saving /tmp/KS_dt=1e-06_nx=50_k0=1_k1=1_k2=1_k3=1_k4=1_48.vtk
iter = 49	 (t = 4.9e-05)
  number of vertices: 36710
  max(u) = 84623.6  min(u) = 1.45072e-18
  max(v) = 495.418  min(v) = 1.57573e-08
  int_Th(u) = 33.9639  int_Th(v) = 31.4133
Saving /tmp/KS_dt=1e-06_nx=50_k0=1_k1=1_k2=1_k3=1_k4=1_49.vtk
iter = 50	 (t = 5e-05)
  number of vertices: 36696
  max(u) = 90554.2  min(u) = 1.49078e-18
  max(v) = 495.371  min(v) = 1.59302e-08
  int_Th(u) = 34.03  int_Th(v) = 31.4133
Saving /tmp/KS_dt=1e-06_nx=50_k0=1_k1=1_k2=1_k3=1_k4=1_50.vtk
iter = 51	 (t = 5.1e-05)
  number of vertices: 36676
  max(u) = 96440.1  min(u) = 1.53164e-18
  max(v) = 495.329  min(v) = 1.61031e-08
  int_Th(u) = 34.0779  int_Th(v) = 31.4132
Saving /tmp/KS_dt=1e-06_nx=50_k0=1_k1=1_k2=1_k3=1_k4=1_51.vtk
iter = 52	 (t = 5.2e-05)
  number of vertices: 36733
  max(u) = 102484  min(u) = 1.57331e-18
  max(v) = 495.293  min(v) = 1.62763e-08
  int_Th(u) = 34.1209  int_Th(v) = 31.4131
Saving /tmp/KS_dt=1e-06_nx=50_k0=1_k1=1_k2=1_k3=1_k4=1_52.vtk
iter = 53	 (t = 5.3e-05)
  number of vertices: 36787
  max(u) = 109000  min(u) = 1.61583e-18
  max(v) = 495.258  min(v) = 1.64496e-08
  int_Th(u) = 34.1762  int_Th(v) = 31.4131
Saving /tmp/KS_dt=1e-06_nx=50_k0=1_k1=1_k2=1_k3=1_k4=1_53.vtk
iter = 54	 (t = 5.4e-05)
  number of vertices: 36577
  max(u) = 115655  min(u) = 1.65919e-18
  max(v) = 495.228  min(v) = 1.66231e-08
  int_Th(u) = 34.2284  int_Th(v) = 31.413
Saving /tmp/KS_dt=1e-06_nx=50_k0=1_k1=1_k2=1_k3=1_k4=1_54.vtk
iter = 55	 (t = 5.5e-05)
  number of vertices: 36687
  max(u) = 122646  min(u) = 1.70342e-18
  max(v) = 495.203  min(v) = 1.67968e-08
  int_Th(u) = 34.2881  int_Th(v) = 31.4129
Saving /tmp/KS_dt=1e-06_nx=50_k0=1_k1=1_k2=1_k3=1_k4=1_55.vtk
iter = 56	 (t = 5.6e-05)
  number of vertices: 36528
  max(u) = 130202  min(u) = 1.74854e-18
  max(v) = 495.179  min(v) = 1.69708e-08
  int_Th(u) = 34.3436  int_Th(v) = 31.4129
Saving /tmp/KS_dt=1e-06_nx=50_k0=1_k1=1_k2=1_k3=1_k4=1_56.vtk
iter = 57	 (t = 5.7e-05)
  number of vertices: 36772
  max(u) = 138061  min(u) = 1.79457e-18
  max(v) = 495.16  min(v) = 1.71449e-08
  int_Th(u) = 34.425  int_Th(v) = 31.4128
Saving /tmp/KS_dt=1e-06_nx=50_k0=1_k1=1_k2=1_k3=1_k4=1_57.vtk
iter = 58	 (t = 5.8e-05)
  number of vertices: 36556
  max(u) = 146691  min(u) = 1.84151e-18
  max(v) = 495.141  min(v) = 1.73194e-08
  int_Th(u) = 34.4636  int_Th(v) = 31.4127
Saving /tmp/KS_dt=1e-06_nx=50_k0=1_k1=1_k2=1_k3=1_k4=1_58.vtk
iter = 59	 (t = 5.9e-05)
  number of vertices: 36739
  max(u) = 155666  min(u) = 1.8894e-18
  max(v) = 495.126  min(v) = 1.7494e-08
  int_Th(u) = 34.5528  int_Th(v) = 31.4127
Saving /tmp/KS_dt=1e-06_nx=50_k0=1_k1=1_k2=1_k3=1_k4=1_59.vtk
iter = 60	 (t = 6e-05)
  number of vertices: 36584
  max(u) = 165265  min(u) = 1.93824e-18
  max(v) = 495.114  min(v) = 1.7669e-08
  int_Th(u) = 34.6083  int_Th(v) = 31.4126
Saving /tmp/KS_dt=1e-06_nx=50_k0=1_k1=1_k2=1_k3=1_k4=1_60.vtk
iter = 61	 (t = 6.1e-05)
  number of vertices: 36722
  max(u) = 175456  min(u) = 1.98807e-18
  max(v) = 495.105  min(v) = 1.78443e-08
  int_Th(u) = 34.6942  int_Th(v) = 31.4125
Saving /tmp/KS_dt=1e-06_nx=50_k0=1_k1=1_k2=1_k3=1_k4=1_61.vtk
iter = 62	 (t = 6.2e-05)
  number of vertices: 36637
  max(u) = 186447  min(u) = 2.03888e-18
  max(v) = 495.098  min(v) = 1.80198e-08
  int_Th(u) = 34.7649  int_Th(v) = 31.4124
Saving /tmp/KS_dt=1e-06_nx=50_k0=1_k1=1_k2=1_k3=1_k4=1_62.vtk
iter = 63	 (t = 6.3e-05)
  number of vertices: 36663
  max(u) = 198183  min(u) = 2.09072e-18
  max(v) = 495.093  min(v) = 1.81957e-08
  int_Th(u) = 34.8499  int_Th(v) = 31.4123
Saving /tmp/KS_dt=1e-06_nx=50_k0=1_k1=1_k2=1_k3=1_k4=1_63.vtk
iter = 64	 (t = 6.4e-05)
  number of vertices: 36573
  max(u) = 210499  min(u) = 2.14358e-18
  max(v) = 495.093  min(v) = 1.8372e-08
  int_Th(u) = 34.9239  int_Th(v) = 31.4123
Saving /tmp/KS_dt=1e-06_nx=50_k0=1_k1=1_k2=1_k3=1_k4=1_64.vtk
iter = 65	 (t = 6.5e-05)
  number of vertices: 36607
  max(u) = 223705  min(u) = 2.19751e-18
  max(v) = 495.094  min(v) = 1.85486e-08
  int_Th(u) = 35.0036  int_Th(v) = 31.4122
Saving /tmp/KS_dt=1e-06_nx=50_k0=1_k1=1_k2=1_k3=1_k4=1_65.vtk
iter = 66	 (t = 6.6e-05)
  number of vertices: 36577
  max(u) = 237645  min(u) = 2.25251e-18
  max(v) = 495.1  min(v) = 1.87255e-08
  int_Th(u) = 35.0914  int_Th(v) = 31.4121
Saving /tmp/KS_dt=1e-06_nx=50_k0=1_k1=1_k2=1_k3=1_k4=1_66.vtk
iter = 67	 (t = 6.7e-05)
  number of vertices: 36560
  max(u) = 252706  min(u) = 2.3086e-18
  max(v) = 495.108  min(v) = 1.89028e-08
  int_Th(u) = 35.1998  int_Th(v) = 31.412
Saving /tmp/KS_dt=1e-06_nx=50_k0=1_k1=1_k2=1_k3=1_k4=1_67.vtk
iter = 68	 (t = 6.8e-05)
  number of vertices: 36625
  max(u) = 268582  min(u) = 2.36582e-18
  max(v) = 495.12  min(v) = 1.90805e-08
  int_Th(u) = 35.2839  int_Th(v) = 31.412
Saving /tmp/KS_dt=1e-06_nx=50_k0=1_k1=1_k2=1_k3=1_k4=1_68.vtk
iter = 69	 (t = 6.9e-05)
  number of vertices: 36622
  max(u) = 285585  min(u) = 2.42417e-18
  max(v) = 495.134  min(v) = 1.92586e-08
  int_Th(u) = 35.3864  int_Th(v) = 31.4119
Saving /tmp/KS_dt=1e-06_nx=50_k0=1_k1=1_k2=1_k3=1_k4=1_69.vtk
iter = 70	 (t = 7e-05)
  number of vertices: 36520
  max(u) = 303429  min(u) = 2.48368e-18
  max(v) = 495.153  min(v) = 1.94372e-08
  int_Th(u) = 35.4692  int_Th(v) = 31.4118
Saving /tmp/KS_dt=1e-06_nx=50_k0=1_k1=1_k2=1_k3=1_k4=1_70.vtk
iter = 71	 (t = 7.1e-05)
  number of vertices: 36510
  max(u) = 322593  min(u) = 2.54438e-18
  max(v) = 495.175  min(v) = 1.96161e-08
  int_Th(u) = 35.5892  int_Th(v) = 31.4118
Saving /tmp/KS_dt=1e-06_nx=50_k0=1_k1=1_k2=1_k3=1_k4=1_71.vtk
iter = 72	 (t = 7.2e-05)
  number of vertices: 36567
  max(u) = 343173  min(u) = 2.60628e-18
  max(v) = 495.2  min(v) = 1.97955e-08
  int_Th(u) = 35.6769  int_Th(v) = 31.4117
Saving /tmp/KS_dt=1e-06_nx=50_k0=1_k1=1_k2=1_k3=1_k4=1_72.vtk
iter = 73	 (t = 7.3e-05)
  number of vertices: 36606
  max(u) = 366339  min(u) = 2.6694e-18
  max(v) = 495.223  min(v) = 1.99753e-08
  int_Th(u) = 35.8739  int_Th(v) = 31.4116
Saving /tmp/KS_dt=1e-06_nx=50_k0=1_k1=1_k2=1_k3=1_k4=1_73.vtk
iter = 74	 (t = 7.4e-05)
  number of vertices: 36514
  max(u) = 389481  min(u) = 2.73378e-18
  max(v) = 495.254  min(v) = 2.01556e-08
  int_Th(u) = 36.085  int_Th(v) = 31.4116
Saving /tmp/KS_dt=1e-06_nx=50_k0=1_k1=1_k2=1_k3=1_k4=1_74.vtk
iter = 75	 (t = 7.5e-05)
  number of vertices: 36553
  max(u) = 413595  min(u) = 2.79944e-18
  max(v) = 495.293  min(v) = 2.03363e-08
  int_Th(u) = 36.2507  int_Th(v) = 31.4115
Saving /tmp/KS_dt=1e-06_nx=50_k0=1_k1=1_k2=1_k3=1_k4=1_75.vtk
iter = 76	 (t = 7.6e-05)
  number of vertices: 36506
  max(u) = 440560  min(u) = 2.86639e-18
  max(v) = 495.333  min(v) = 2.05175e-08
  int_Th(u) = 36.4619  int_Th(v) = 31.4114
Saving /tmp/KS_dt=1e-06_nx=50_k0=1_k1=1_k2=1_k3=1_k4=1_76.vtk
iter = 77	 (t = 7.7e-05)
  number of vertices: 36532
  max(u) = 469446  min(u) = 2.93467e-18
  max(v) = 495.379  min(v) = 2.06992e-08
  int_Th(u) = 36.6803  int_Th(v) = 31.4113
Saving /tmp/KS_dt=1e-06_nx=50_k0=1_k1=1_k2=1_k3=1_k4=1_77.vtk
iter = 78	 (t = 7.8e-05)
  number of vertices: 36481
  max(u) = 500318  min(u) = 3.00429e-18
  max(v) = 495.429  min(v) = 2.08814e-08
  int_Th(u) = 36.8977  int_Th(v) = 31.4113
Saving /tmp/KS_dt=1e-06_nx=50_k0=1_k1=1_k2=1_k3=1_k4=1_78.vtk
iter = 79	 (t = 7.9e-05)
  number of vertices: 36529
  max(u) = 534246  min(u) = 3.07529e-18
  max(v) = 495.485  min(v) = 2.10641e-08
  int_Th(u) = 37.2752  int_Th(v) = 31.4112
Saving /tmp/KS_dt=1e-06_nx=50_k0=1_k1=1_k2=1_k3=1_k4=1_79.vtk
iter = 80	 (t = 8e-05)
  number of vertices: 36394
  max(u) = 571426  min(u) = 3.14768e-18
  max(v) = 495.544  min(v) = 2.12474e-08
  int_Th(u) = 37.5821  int_Th(v) = 31.4111
Saving /tmp/KS_dt=1e-06_nx=50_k0=1_k1=1_k2=1_k3=1_k4=1_80.vtk
iter = 81	 (t = 8.1e-05)
  number of vertices: 36484
  max(u) = 613852  min(u) = 3.22151e-18
  max(v) = 495.607  min(v) = 2.14311e-08
  int_Th(u) = 38.1203  int_Th(v) = 31.411
Saving /tmp/KS_dt=1e-06_nx=50_k0=1_k1=1_k2=1_k3=1_k4=1_81.vtk
iter = 82	 (t = 8.2e-05)
  number of vertices: 36471
  max(u) = 659053  min(u) = 3.29678e-18
  max(v) = 495.677  min(v) = 2.16154e-08
  int_Th(u) = 38.6402  int_Th(v) = 31.4109
Saving /tmp/KS_dt=1e-06_nx=50_k0=1_k1=1_k2=1_k3=1_k4=1_82.vtk
iter = 83	 (t = 8.3e-05)
  number of vertices: 36467
  max(u) = 713327  min(u) = 3.37353e-18
  max(v) = 495.751  min(v) = 2.18002e-08
  int_Th(u) = 39.7707  int_Th(v) = 31.4109
Saving /tmp/KS_dt=1e-06_nx=50_k0=1_k1=1_k2=1_k3=1_k4=1_83.vtk
iter = 84	 (t = 8.4e-05)
  number of vertices: 36484
  max(u) = 770434  min(u) = -253.843 ...---... Positivity broken!!!
  max(v) = 495.841  min(v) = 2.19856e-08
  int_Th(u) = 40.5216  int_Th(v) = 31.4108
Saving /tmp/KS_dt=1e-06_nx=50_k0=1_k1=1_k2=1_k3=1_k4=1_84.vtk
iter = 85	 (t = 8.5e-05)
  number of vertices: 36510
  max(u) = 836752  min(u) = -2475.96 ...---... Positivity broken!!!
  max(v) = 495.941  min(v) = 2.21715e-08
  int_Th(u) = 40.9483  int_Th(v) = 31.4107
Saving /tmp/KS_dt=1e-06_nx=50_k0=1_k1=1_k2=1_k3=1_k4=1_85.vtk
iter = 86	 (t = 8.6e-05)
  number of vertices: 36437
  max(u) = 907880  min(u) = -4082.2 ...---... Positivity broken!!!
  max(v) = 496.059  min(v) = 2.2358e-08
  int_Th(u) = 41.2915  int_Th(v) = 31.4106
Saving /tmp/KS_dt=1e-06_nx=50_k0=1_k1=1_k2=1_k3=1_k4=1_86.vtk
iter = 87	 (t = 8.7e-05)
  number of vertices: 36435
  max(u) = 992471  min(u) = -6824.27 ...---... Positivity broken!!!
  max(v) = 496.191  min(v) = 2.25451e-08
  int_Th(u) = 42.2164  int_Th(v) = 31.4106
Saving /tmp/KS_dt=1e-06_nx=50_k0=1_k1=1_k2=1_k3=1_k4=1_87.vtk
iter = 88	 (t = 8.8e-05)
  number of vertices: 36379
  max(u) = 1.08022e+06  min(u) = -9526.71 ...---... Positivity broken!!!
  max(v) = 496.354  min(v) = 2.27328e-08
  int_Th(u) = 42.7433  int_Th(v) = 31.4105
Saving /tmp/KS_dt=1e-06_nx=50_k0=1_k1=1_k2=1_k3=1_k4=1_88.vtk
iter = 89	 (t = 8.9e-05)
  number of vertices: 36505
  max(u) = 1.20166e+06  min(u) = -11806.2 ...---... Positivity broken!!!
  max(v) = 496.534  min(v) = 2.29211e-08
  int_Th(u) = 43.4047  int_Th(v) = 31.4104
Saving /tmp/KS_dt=1e-06_nx=50_k0=1_k1=1_k2=1_k3=1_k4=1_89.vtk
iter = 90	 (t = 9e-05)
  number of vertices: 36306
  max(u) = 1.35738e+06  min(u) = -12770.1 ...---... Positivity broken!!!
  max(v) = 496.727  min(v) = 2.311e-08
  int_Th(u) = 44.1152  int_Th(v) = 31.4104
Saving /tmp/KS_dt=1e-06_nx=50_k0=1_k1=1_k2=1_k3=1_k4=1_90.vtk
iter = 91	 (t = 9.1e-05)
  number of vertices: 36344
  max(u) = 1.52403e+06  min(u) = -13433.9 ...---... Positivity broken!!!
  max(v) = 496.965  min(v) = 2.32995e-08
  int_Th(u) = 45.1599  int_Th(v) = 31.4103
Saving /tmp/KS_dt=1e-06_nx=50_k0=1_k1=1_k2=1_k3=1_k4=1_91.vtk
iter = 92	 (t = 9.2e-05)
  number of vertices: 36254
  max(u) = 1.79049e+06  min(u) = -19498.8 ...---... Positivity broken!!!
  max(v) = 497.242  min(v) = 2.34896e-08
  int_Th(u) = 48.7336  int_Th(v) = 31.4102
Saving /tmp/KS_dt=1e-06_nx=50_k0=1_k1=1_k2=1_k3=1_k4=1_92.vtk
iter = 93	 (t = 9.3e-05)
  number of vertices: 36286
  max(u) = 2.29399e+06  min(u) = -18121.3 ...---... Positivity broken!!!
  max(v) = 497.581  min(v) = 2.36803e-08
  int_Th(u) = 53.2139  int_Th(v) = 31.4102
Saving /tmp/KS_dt=1e-06_nx=50_k0=1_k1=1_k2=1_k3=1_k4=1_93.vtk
iter = 94	 (t = 9.4e-05)
  number of vertices: 36313
  max(u) = 2.72786e+06  min(u) = -18211 ...---... Positivity broken!!!
  max(v) = 498.098  min(v) = 2.38717e-08
  int_Th(u) = 54.9406  int_Th(v) = 31.4101
Saving /tmp/KS_dt=1e-06_nx=50_k0=1_k1=1_k2=1_k3=1_k4=1_94.vtk
iter = 95	 (t = 9.5e-05)
  number of vertices: 36302
  max(u) = 3.60565e+06  min(u) = -14403.9 ...---... Positivity broken!!!
  max(v) = 498.818  min(v) = 2.40637e-08
  int_Th(u) = 59.4515  int_Th(v) = 31.41
Saving /tmp/KS_dt=1e-06_nx=50_k0=1_k1=1_k2=1_k3=1_k4=1_95.vtk
iter = 96	 (t = 9.6e-05)
  number of vertices: 36149
  max(u) = 5.01827e+06  min(u) = -12499.2 ...---... Positivity broken!!!
  max(v) = 499.781  min(v) = 2.42564e-08
  int_Th(u) = 62.5781  int_Th(v) = 31.41
Saving /tmp/KS_dt=1e-06_nx=50_k0=1_k1=1_k2=1_k3=1_k4=1_96.vtk
iter = 97	 (t = 9.7e-05)
  number of vertices: 36245
  max(u) = 8.00032e+06  min(u) = -9857.24 ...---... Positivity broken!!!
  max(v) = 501.182  min(v) = 2.44497e-08
  int_Th(u) = 67.8566  int_Th(v) = 31.4099
Saving /tmp/KS_dt=1e-06_nx=50_k0=1_k1=1_k2=1_k3=1_k4=1_97.vtk
iter = 98	 (t = 9.8e-05)
  number of vertices: 36006
  max(u) = 1.36445e+07  min(u) = -7541 ...---... Positivity broken!!!
  max(v) = 503.603  min(v) = 2.46437e-08
  int_Th(u) = 73.9466  int_Th(v) = 31.4099
Saving /tmp/KS_dt=1e-06_nx=50_k0=1_k1=1_k2=1_k3=1_k4=1_98.vtk
iter = 99	 (t = 9.9e-05)
  number of vertices: 36142
  max(u) = 3.69278e+07  min(u) = -6110.17 ...---... Positivity broken!!!
  max(v) = 507.999  min(v) = 2.48384e-08
  int_Th(u) = 79.837  int_Th(v) = 31.4099
Saving /tmp/KS_dt=1e-06_nx=50_k0=1_k1=1_k2=1_k3=1_k4=1_99.vtk
iter = 100	 (t = 0.0001)
  number of vertices: 35913
  max(u) = 1.3742e+08  min(u) = -4742.48 ...---... Positivity broken!!!
  max(v) = 516.746  min(v) = 2.50337e-08
  int_Th(u) = 84.1635  int_Th(v) = 31.4098
Saving /tmp/KS_dt=1e-06_nx=50_k0=1_k1=1_k2=1_k3=1_k4=1_100.vtk
iter = 101	 (t = 0.000101)
  number of vertices: 35650
  max(u) = 9.23711e+08  min(u) = -2.53247e+07 ...---... Positivity broken!!!
  max(v) = 532.226  min(v) = 2.52297e-08
  int_Th(u) = 88.6142  int_Th(v) = 31.4098
Saving /tmp/KS_dt=1e-06_nx=50_k0=1_k1=1_k2=1_k3=1_k4=1_101.vtk
iter = 102	 (t = 0.000102)
  number of vertices: 35121
  max(u) = 9.21251e+09  min(u) = -2.81646e+08 ...---... Positivity broken!!!
  max(v) = 552.346  min(v) = 2.54264e-08
  int_Th(u) = 92.0561  int_Th(v) = 31.4097
Saving /tmp/KS_dt=1e-06_nx=50_k0=1_k1=1_k2=1_k3=1_k4=1_102.vtk
iter = 103	 (t = 0.000103)
  number of vertices: 34348
  max(u) = 8.9585e+10  min(u) = -7.87775e+09 ...---... Positivity broken!!!
  max(v) = 575.492  min(v) = 2.56239e-08
  int_Th(u) = 96.3776  int_Th(v) = 31.4098
Saving /tmp/KS_dt=1e-06_nx=50_k0=1_k1=1_k2=1_k3=1_k4=1_103.vtk
>>>>> BLOW-UP FOUND at t = 0.000103 (uMax = 8.9585e+10, blow-up tolerance = 1e+10)
