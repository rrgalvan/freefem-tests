// Keller-Segel
//
// * Solved using standard FE techiques, but mass lumpng
// * Matricies are mounted using "varf"
//

verbosity=0;
load "iovtk";
load "qf11to25" // Para definir nuevas fórmulas de cuadratura

include "getARGV.idp"; // Functions to read arguments from command line

//,---------------------------------------------------------------------
//| Keller-Segel data
//`---------------------------------------------------------------------
int nx = getARGV("-nx", 50); // Default: nx=50
int acuteMesh = getARGV("-acute", 1);
mesh Th;
if(acuteMesh) {
  string meshDir = "meshes/";
  string meshFile= meshDir + "acute_mesh_" + nx + "x" + nx + "_[-0.5,0.5]^2.msh";
  cout << "Reading mesh from " << meshFile << endl;
  Th=readmesh(meshFile);
 }
 else {
   Th=square(nx, nx, [x-0.5, y-0.5]);
 }

//>> Paremeters from G. Viglialoro et al....
// int nx=20
// mesh Th = square(nx, nx, [4*x-2, 4*y-2]);
// real k0=1, k1=0.2, k2=1, k3=0.1, k4=1;
// u0 = 1.15*exp(-x^2-y^2)*(4-x^2)^2*(4-y^2)^2;
// v0 = 0.55*exp(-x^2-y^2)*(4-x^2)^2*(4-y^2)^2;

//>> Parameters from Y. Epshteyn & A. Kurganov...
//>> Blow-up expected at t = 1.21·10^{−4}
// int nx = 50; // Also nx=101
// mesh Th = square(nx, nx, [ x-0.5, y-0.5 ]);
real k0 = getARGV("-k0", 1);
real k1 = getARGV("-k1", 1);
real k2 = getARGV("-k2", 1);
real k3 = getARGV("-k3", 1);
real k4 = getARGV("-k4", 1);
real cteU0 = getARGV("-cu0", 1000);
real cteV0 = getARGV("-cv0", 500);
func uInitCond = cteU0*exp(-0.1*cteU0*(x^2+y^2));
func vInitCond = cteV0*exp(-0.1*cteV0*(x^2+y^2));

// Finite elements
fespace Uh(Th, P1);
Uh u, ub; // Unknown and test function
Uh u0;
fespace Vh(Th, P1);
Vh v, vb, v0;

//,---------------------------------------------------------------------
//| Time parameters
//`---------------------------------------------------------------------
real t = 0;
int niter = getARGV("-nt", 200);
real dt = getARGV("-dt", 1.e-6);

u0 = uInitCond;
v0 = vInitCond;

cout << "M'aximos y m'inimos de los datos iniciales:" << endl;
{
  u=u0; v=v0;
  real uMax = u[].max; real uMin=u[].min;
  real vMax = v[].max; real vMin=v[].min;
  cout << "  max(u) = " << uMax << "  min(u) = " << uMin
       << (uMin<0 ? " ...---... Positivity broken!!!" : "") << endl;
  cout << "  max(v) = " << vMax << "  min(v) = " << vMin
       << (vMin<0 ? " ...---... (V) Positivity broken!!!" : "") << endl;
}
real integralU0=int2d(Th)(u0);
cout <<"La integral del dato inicial es "<< integralU0 <<
  " (4*pi=" << 4*pi << ")" << endl;
cout << "Condici'on CFL: dt = " << dt << ", h ~ " << (1./nx) <<
  ", k/h ~ " << dt/(1./nx) << ", k/h^2 ~ " << dt/(1./nx)^2 << endl;
string testName = "KS_" +
  "dt=" + dt + "_nx=" + nx +
  "_k0=" + k0 + "_k1=" + k1 + "_k2=" + k2 + "_k3=" + k3 + "_k4=" + k4;
cout << "Running test " << testName << endl;

//,---------------------------------------------------------------------
//| Variational problems
//`---------------------------------------------------------------------

// Macros..............................................................>
macro grad(u) [ dx(u), dy(u) ] // End of Macro
  ; // for emacs :)
macro div(u,v) ( dx(u) + dy(v) ) // End of Macro
  ; // for emacs :)


// Quadrature formulae..................................................>
// real[int,int] qfDataBaryc=[ // w_i, x_baric_i, y_baric_i
//                              [1.,  1./3, 1./3] ];
real[int,int] qfDataNoBaryc=[ // w_i, x_baric_i, y_baric_i
                             [1.,  1./4, 1./4] ];

QF2 qfSpecial(1, qfDataNoBaryc);

// int barycenterQF = getARGV("-qfbaryc", 0);
// QF2 qfBaryc  (1, qfDataBaryc);
// QF2 qfNoBaryc(1, qfDataNoBaryc);
// QF2 qfSpecial;
// if(barycenterQF) {
//   qfSpecial = qfBaryc;
//  }
//  else {
//   qfSpecial = qfNoBaryc;
//  }

// Macro to select if special quadrature formula is selected
// macro specialQuadOptions qft=qfSpecial // EOM
macro specialQuadOptions qforder=2 // EOM

problem KellerSegelU(u,ub)=
  int2d(Th, qft=qf1pTlump)( u*ub ) +
  int2d(Th)( dt*k0 * grad(u)'*grad(ub) ) +
  int2d(Th, specialQuadOptions)( -dt*k1 * u*grad(v0)'*grad(ub) )
  - int2d(Th, qft=qf1pTlump)( u0*ub )
  ;
problem KellerSegelV(v,vb)=
  int2d(Th, qft=qf1pTlump )( v*vb ) +
  int2d(Th)( dt*k2 * grad(v)'*grad(vb) + dt*k3 * v*vb )
  - int2d(Th)( dt*k4 * u*vb )
  - int2d(Th, qft=qf1pTlump)( v0*vb )
  ;


// Linear form for variational formulation of convection
// varf varfConvectThetaSchemeDG(unused,ub) =
//   int2d(Th)(u0*ub/dt)
//   + aUPW( -(1-theta), b, u0, ub ); // - aUPW in RHS

// Bilinear form for mass matrix
varf varfMassLump(u,ub) =
  int2d(Th, qft=qf1pTlump) (u*ub);

// Bilinear form for diffusion stiffness matrix
varf varfDiffusion(u,ub) =
  int2d(Th) ( grad(u)'*grad(ub) );

// Bilinear form for chemotaxis
// We use a special quadrature formula, so that u is evaluated
// on an specific point, whose barycentric coords are (1/4,1/4,1/2)

varf varfChemotaxisExplicitV(u,ub)=
  int2d(Th, specialQuadOptions)( -u*grad(v0)'*grad(ub) );


NewMacro BuildSystemU
//----------------------------------------------------------------------
// 1.a Define matrix
matrix Mu = varfMassLump(Uh, Uh);  // Mass matrix
matrix Ku = varfDiffusion(Uh,Uh);  // Diffusion matrix
matrix Cu = varfChemotaxisExplicitV(Uh,Uh);
matrix Au = Mu + dt*k0*Ku + dt*k1*Cu;
set(Au, solver=UMFPACK);

// 1.b Define RHS
real[int] Fu = Mu*u0[];
//----------------------------------------------------------------------
EndMacro

NewMacro BuildSystemV
//----------------------------------------------------------------------
// 2.a Define matrix
matrix Av = (1 + dt*k3)*Mu + dt*k2*Ku; // Assuming Uh == Vh
set(Av, solver=UMFPACK);

// 2.b Define RHS
real[int] vAux= dt*k4*u[] + v0[]; // Assuming dim(Uh) == dim(Vh)
real[int] Fv = Mu*vAux; // Assuming Uh == Vh
//----------------------------------------------------------------------
EndMacro

//,---------------------------------------------------------------------
//| Time loop
//`---------------------------------------------------------------------


real uMax = 0, vMax=0;
real blowUpTolerance=1.e+10;

for (int k=1; k<=niter && uMax<blowUpTolerance && vMax<blowUpTolerance; k++) {
  t=t+dt;
  cout << "iter = " << k << "\t (t = " << t << ")" << endl;
  cout << "  number of vertices: " << Th.nv << endl;
  bool buildMatrixSystem = false;
  if(buildMatrixSystem) {
    // 1) Compute u (live organism density) >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    BuildSystemU
    u[] = Au^-1*Fu;

    // 2) Compute v (chemoattractant density) >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    BuildSystemV
    v[] = Av^-1*Fv;

  }

  else {
    // Solve system for u ······················································
    KellerSegelU;   // Compute u

    // Solve system for v ······················································
    KellerSegelV;   // Compute v
  }

  // Post-process ····························································

  uMax = u[].max; real uMin=u[].min;
  vMax = v[].max; real vMin=v[].min;
  cout << "  max(u) = " << uMax << "  min(u) = " << uMin
       << (uMin<0 ? " ...---... Positivity broken!!!" : "") << endl;
  cout << "  max(v) = " << vMax << "  min(v) = " << vMin
       << (vMin<0 ? " ...---... (V) Positivity broken!!!" : "") << endl;
  real uInt = int2d(Th)(u); real vInt = int2d(Th)(v);
  cout << "  int_Th(u) = " << uInt << "  int_Th(v) = " << vInt << endl;

  plot(v, value=1, fill=1, dim=3);
  bool adaptMesh=getARGV("-adaptMesh", 1);
  if(adaptMesh) {
    Th = adaptmesh(Th, v, err=0.001, nbvx=500*nx*nx);
    plot(Th, wait=1);
  }
  // plot(Th, wait=1, ps="mesh_" + k + ".eps");

  bool plotToVTK=true; if(plotToVTK) {
    string vtkFile="/tmp/" + testName + "_" + k + ".vtk";
    int[int] vtkOrder=[0];
    cout << "Saving " << vtkFile << endl;
    savevtk(vtkFile, Th, u, v, dataname="u v", order=vtkOrder);
  }

  // Prepare next iteration
  u0 = u;
  v0 = v;

 }

if(uMax>=blowUpTolerance) cout << ">>>>> BLOW-UP FOUND at t = " << t
			       << " (uMax = " << uMax << ", blow-up tolerance = "
			       << blowUpTolerance << ")" << endl;
