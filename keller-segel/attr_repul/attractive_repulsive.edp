verbosity=0;

include "getARGV.idp"; // Functions to read arguments from command line

//,---------------------------------------------------------------------
// Circle mesh
//`---------------------------------------------------------------------
// real R=1.5;
real R=2;
border Gamma(t=0, 2*pi) { x=R*cos(t);  y=R*sin(t); };
int nx = getARGV("-nx", 20); // Default: nx=50
mesh Th = buildmesh(Gamma(nx));

//,---------------------------------------------------------------------
// Square mesh
//`---------------------------------------------------------------------
// int nx = 30;
// mesh Th = square(nx, nx, [4*x-2, 4*y-2]);

// Unknown and test functions
fespace Uh(Th, P1);
Uh u, ub, u0;
Uh u0s, u0r; // u0^s, u0^r

fespace Vh(Th, P1);
Vh v, vb, v0;
fespace Wh(Th, P1);
Vh w, wb, w0;

//,---------------------------------------------------------------------
//| Time parameters
//`---------------------------------------------------------------------
real t = 0;
real dt = getARGV("-dt", 1.e-4);
int niter = getARGV("-nt", 20);

real tau=getARGV("-tau", 0); // tau=0 => elliptic repulsion, tau=1 => parabolic repulsion

//,---------------------------------------------------------------------
//| Keller-Segel data
//`---------------------------------------------------------------------
real ChiAttraction = getARGV("-cAtt", 1);
real XiRepulsion   = getARGV("-cRep", 1);

real alpha = getARGV("-alpha", 1);
real beta  = getARGV("-beta",  1);
real gamma = getARGV("-gamma", 1);
real delta = getARGV("-delta", 1);

real r = getARGV("-r", 1);
real s = getARGV("-s", 1.7);

real x0=0.0, y0=0.0;
real C0 = getARGV("-C0", 20);
real C1 = getARGV("-C0", 30);
real infU = getARGV("-infU", 2);

func initialU = infU + C0*exp( -C1*( (x-x0)^2 + (y-y0)^2 ) );
u0 = initialU;
v0 = 0.5*u0;
w0 = 0.5*u0;

int adaptMesh = getARGV("-adaptmesh", 1);
real errorAdapt = getARGV("-errAdapt", 0.001);
if(adaptMesh) {
  Th = adaptmesh(Th, v0, err=errorAdapt, nbvx=100*nx*nx);
  plot(Th, wait=1);
 }


//,---------------------------------------------------------------------
//| Print info
//`---------------------------------------------------------------------

string outputFileName = getARGV("-outf", "output.yaml");
ofstream fout(outputFileName);
NewMacro print(code) { /* Print to console and save to output file */
cout << code;
fout << code;
fout.flush;
}
EndMacro;

print("---" << endl);
print("Test data: " << endl);
print("  dt: " << dt << "   # Time step" << endl);
print("  nt: " << niter << "   # Number of time iterations" << endl);
print("  tau: " << tau << "   # 0 : elliptic attractive equation (w)" << endl);
print("  nx: " << nx << "   # Number of bounary subintervals" << endl);
print("  ChiAttraction: " << ChiAttraction << "   # Attractive chemotaxis coeff." << endl);
print("  XiRepulsion: " << XiRepulsion << "   # Repulsive chemotaxis coeff." << endl);
print("  alpha: " << alpha << "" << endl);
print("  beta: " << beta << "" << endl);
print("  gamma: " << gamma << "" << endl);
print("  delta: " << delta << "" << endl);
print("  r: " << r << "" << endl);
print("  s: " << s << "" << endl);
print("  C0: " << C0 << "   # Constant multiplying exp() for u0" << endl);
print("  C1: " << C1 << "   # Constant in exp() for u0" << endl);
print("  infU: " << infU << "  # Additive constant for u0" << endl);
print("  adaptMesh: " << (adaptMesh ? "Yes" : "No") << "  # Mesh adapting" << endl);
print("  errAdapt: " << errorAdapt << "  #  Error in mesh adapting" << endl);

real integralU0=int2d(Th)(u0);
cout <<"La integral del dato inicial es "<< integralU0 << "(4*pi=" << 4*pi << ")" << endl;

string testName = "KS_" +
"dt: " + dt + "_nx: " + nx + "_ChiAttraction=" + ChiAttraction + "_XiRepulsion=" + XiRepulsion;
cout << "Running test " << testName << endl;


//,---------------------------------------------------------------------
//| Variational problems
//`---------------------------------------------------------------------

// Macros..............................................................>
macro grad(u) [ dx(u), dy(u) ] // End of Macro
; // for emacs :)
macro div(u,v) ( dx(u) + dy(v) ) // End of Macro
; // for emacs :)

// Keller Segel problem / u
problem KSAttRepU(u,ub)=
int2d(Th)( u*ub/dt + grad(u)'*grad(ub)
            - ChiAttraction*u*grad(v)'*grad(ub) // Attractive chemotaxis
            + XiRepulsion*u*grad(w)'*grad(ub) // Repulsive chemotaxis
            )
+ int2d(Th)( - u0*ub/dt );

// Keller Segel problem / v
problem KSAttRepV(v,vb)=
int2d(Th)( v*vb/dt + grad(v)'*grad(vb) + beta*v*vb )
+ int2d(Th)( - alpha*u0s*vb
            - v0*vb/dt );

// Keller Segel problem / w
problem KSAttRepW(w,wb)=
int2d(Th)( tau*w*wb/dt + grad(w)'*grad(wb) + delta*w*wb )
+ int2d(Th)( - gamma*u0r*wb
            - tau*w0*wb/dt );

// Time loop ###################################################
int blowUpIteration = 0;
bool positivityAchieved = true;
real uAbsoluteMax = 0;
real tAbsoluteMax = 0;
real iterAbsoluteMax = 0;

print("Test iterations: " << endl);
int k;
for (k=1; k<=niter; k++) {
t=t+dt;
print("  - Time iteration " << k << ":" << endl);
print("      t: " << t << endl);
// cout << "->   time_step: " << k << endl;
// cout << "iter = " << k << "\t (t = " << t << ")" << endl;

u0s = pow(u0, s);
KSAttRepV; // Compute v
// if(forcePositivity) { v = max(0, v); }

u0r = pow(u0, r);
KSAttRepW; // Compute w
// if(forcePositivity) { w = max(0, w); }

KSAttRepU; // Compute u from u,v
// if(forcePositivity) { u = max(0, u); }

// solve Problem(u, ub)=
//   int2d(Th)(u*ub)
//   - int2d(Th)(1*ub);

real uMax = u[].max; real uMin=u[].min;
if(uAbsoluteMax < uMax) {
uAbsoluteMax = uMax;
tAbsoluteMax = t;
iterAbsoluteMax = k;
}
real vMax = v[].max; real vMin=v[].min;
real wMax = w[].max; real wMin=w[].min;
real uInt = int2d(Th)(u); real vInt = int2d(Th)(v); real wInt = int2d(Th)(w);

print("      u: {max: " << uMax << ", min: " << uMin
    << ", int: " << uInt << "}"
    << (uMin<0 ? " # u: Positivity broken!!!" : "") << endl);
if(uMin < 0) { positivityAchieved = false; }
print("      v: {max: " << vMax << ", min: " << vMin
    << ", int: " << vInt << "}"
    << (vMin<0 ? " # v: Positivity broken!!!" : "") << endl);
print("      w: {max: " << wMax << ", min: " << wMin
    << ", int: " << wInt << "}"
    << (wMin<0 ? " # w: Positivity broken!!!" : "") << endl);
u0r = pow(u,r);
real w0Int = int2d(Th)(w0);
real residuo = tau*(int2d(Th)(w)-int2d(Th)(w0))/dt + delta*wInt - gamma*int2d(Th)(u0r);
cout << "      int_Th(w0) = " << w0Int << endl;
cout << "      inf(v0)*exp(-beta *t) = " << infU*exp(-beta*t)
       << ", delta*int(w)-gamma*int(u^r) = " << residuo << endl;

  if(uMax>1.e+10) {
    cout << "BLOW UP FOUND!!" << endl;
    blowUpIteration = k;
    break;
  }

  bool plotResults = true; if(plotResults) {
    plot(u, cmm="U", value=1, fill=1, dim=3, wait=1);
    plot(v, cmm="V", value=1, fill=1, dim=3, wait=1);
    plot(w, cmm="W", value=1, fill=1, dim=3, wait=1);
  }

  bool saveToVTK=false; if(saveToVTK) {
    load "iovtk";
    string vtkFile="/tmp/" + testName + ".vtk";
    int[int] vtkOrder=[0];
    savevtk(vtkFile, Th, u, v, w, dataname="u v w", order=vtkOrder);
  }

  // Refine mesh
  if(adaptMesh) {
    Th = adaptmesh(Th, v, err=0.001, nbvx=500*nx*nx);
    plot(Th, wait=1);
  }

  u0 = u;  // Prepare next iteration
  // u0s = pow(u0, 0.2);
  v0 = v;
  if(tau != 0) { w0 = w; }

 }

print("Test summary: " << endl);
print("  Number of time iterations: " << min(k, niter) << endl);
print("  Positivity: " << (positivityAchieved ? "Yes" : "No" ) << endl);
print("  Absolute max(u): " << uAbsoluteMax << endl);
print("  At time: " << tAbsoluteMax << endl);
print("  At iteration: " << iterAbsoluteMax << endl);
print("  Blow-up: " << (blowUpIteration>0 ? "Yes" : "No") << endl);
if(blowUpIteration>0) {
  print("    Blow-up time iteration: " << blowUpIteration << endl);
 }
