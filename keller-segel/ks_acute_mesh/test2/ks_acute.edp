// Keller-Segel
//
// * Solved using standard FE techiques, but mass lumpng
// * Matricies are mounted using "varf"
//

verbosity=0;
load "iovtk";
load "qf11to25" // Para definir nuevas fórmulas de cuadratura

include "getARGV.idp"; // Functions to read arguments from command line

//,---------------------------------------------------------------------
//| Keller-Segel data
//`---------------------------------------------------------------------
int nx = getARGV("-nx", 50);
int acuteMesh = getARGV("-acute", 1);
mesh Th;
if(acuteMesh) {
  string meshDir = "meshes/";
  string meshFile= meshDir + "acute_mesh_" + nx + "x" + nx + "_[-0.5,0.5]^2.msh";
  cout << "Reading mesh from " << meshFile << endl;
  Th=readmesh(meshFile);
 }
 else {
   Th=square(nx, nx, [x-0.5, y-0.5]);
 }

// Mesh size
fespace Ph(Th, P0);
Ph hTri = hTriangle;
real h = hTri[].max;
cout << "Size of mesh = " << h << endl;

//>> Paremeters from G. Viglialoro et al....
// int nx=20
// mesh Th = square(nx, nx, [4*x-2, 4*y-2]);
// real k0=1, k1=0.2, k2=1, k3=0.1, k4=1;
// u0 = 1.15*exp(-x^2-y^2)*(4-x^2)^2*(4-y^2)^2;
// v0 = 0.55*exp(-x^2-y^2)*(4-x^2)^2*(4-y^2)^2;

//>> Parameters from  A. Chertok & A. Kurganov...
//>> Blow-up conjetured at $t\in [4.4e-5, 1.e-4]$
// mesh Th = square(nx, nx, [ x-0.5, y-0.5 ]);
real k0 = getARGV("-k0", 1.);
real k1 = getARGV("-k1", 1.);
real k2 = getARGV("-k2", 1.);
real k3 = getARGV("-k3", 1.);
real k4 = getARGV("-k4", 1.);
real cteU0 = getARGV("-cu0", 1000.);
real cteV0 = getARGV("-cv0",  500.);
cout << "cteU0 = " << cteU0 << ", cteV0=" << cteV0 << endl;
func uInitCond = cteU0*exp(-0.1*cteU0*(x^2+y^2));
func vInitCond = cteV0*exp(-0.1*cteV0*(x^2+y^2));

//>> Parameters from Y. Epshteyn & A. Kurganov...
//>> Blow-up expected at t = 1.21·10^{−4}
//real cteU0 = getARGV("-cu0", 1200.);
//real cteV0 = getARGV("-cv0",  600.);


// Finite elements
fespace Uh(Th, P1);
Uh u, ub; // Unknown and test function
Uh u0;
fespace Vh(Th, P1);
Vh v, vb, v0;

//,---------------------------------------------------------------------
//| Time parameters
//`---------------------------------------------------------------------
real t = 0;
int niter = getARGV("-nt", 200);
real dt = getARGV("-dt", 1.e-5);
real Tmax = niter*dt;

u0 = uInitCond;
v0 = vInitCond;

cout << "M'aximos y m'inimos de los datos iniciales:" << endl;
{
  u=u0; v=v0;
  real uMax = u[].max; real uMin=u[].min;
  real vMax = v[].max; real vMin=v[].min;
  cout << "  max(u) = " << uMax << "  min(u) = " << uMin
       << (uMin<0 ? " ...---... Positivity broken!!!" : "") << endl;
  cout << "  max(v) = " << vMax << "  min(v) = " << vMin
       << (vMin<0 ? " ...---... (V) Positivity broken!!!" : "") << endl;
}
real integralU0=int2d(Th)(u0);
cout <<"La integral del dato inicial es "<< integralU0 <<
  " (4*pi=" << 4*pi << ")" << endl;
cout << "Condici'on CFL: dt = " << dt << ", h ~ " << h <<
  ", k/h ~ " << dt/h << ", k/h^2 ~ " << dt/(h^2) << endl;
string testName = "KS_" +
  "dt=" + dt + "_nt=" + niter + "_nx=" + nx +
  "_k0=" + k0 + "_k1=" + k1 + "_k2=" + k2 + "_k3=" + k3 + "_k4=" + k4;
cout << "Running test " << testName << endl;

//,---------------------------------------------------------------------
//| Variational problems
//`---------------------------------------------------------------------

// Macros..............................................................>
macro grad(u) [ dx(u), dy(u) ] // End of Macro
  ; // for emacs :)
macro div(u,v) ( dx(u) + dy(v) ) // End of Macro
  ; // for emacs :)

// Variables related to energy and specific CFL (Theroem 3.1)
macro intLump(expr) int2d(Th, qft=qf1pTlump) (expr) // EOM
  ;

real u0NormHsqr = intLump(u0*u0); // ||u0||_h^2
real v0NormHsqr = intLump(v0*v0); // ||v0||_h^2

// Compute discrete laplacian of v0
Vh v0Laplacian;
solve vLap(v0Laplacian, vb, solver=sparsesolver) =
  intLump( -v0Laplacian*vb ) - int2d(Th)( grad(v0)'*grad(vb) );

cout << "###" << endl;

real gradv0Norm2sqr = int2d(Th)( grad(v0)'*grad(v0) ); // || grad(v0) ||_L2^2
cout << " ||grad(v0)||_L2 ^2 = " << gradv0Norm2sqr << endl;
real u0v0ProdH = intLump(u0*v0); // (u0,v0)_h
cout << " (u0,v0)_h= " << u0v0ProdH << endl;
real logu0u0ProdH = intLump(log(u0)*u0); // (log(u0), u0)_h
cout << " (log(u0),u0)_h= " << u0v0ProdH << endl;
real E0 = 0.5*v0NormHsqr + 0.5*gradv0Norm2sqr - u0v0ProdH + logu0u0ProdH;
cout << "E0 = " << E0 << endl;

real E1 = u0NormHsqr + int2d(Th)( v0Laplacian*v0Laplacian );
cout << "E1 = " << E1 << endl;

real eps=0.5, delta=0.5, e=2.718281828459045235360287;
real CteOmega=1, measOmega=1;
real u0NormL1 = int2d(Th)(abs(u0)), v0NormL1 = int2d(Th)(abs(v0));

cout << "u0NormL1, v0NormL1 = " << u0NormL1 << ", " << v0NormL1 << endl;

real R0tmp = CteOmega/eps + eps + (1+delta)/measOmega * (v0NormL1+u0NormL1);
real R0 = 1/(delta*e) + u0NormL1/delta * R0tmp;
cout << "R0 = " << R0 << endl;
real B0 = 1/delta * E0 + R0;
cout << "B0 = " << B0 << endl;
real B1 = (1+1/delta)*E0 + R0 + 2*measOmega/e;
cout << "B1 = " << B1 << endl;
real B2 = E0 + B0 + B1;
cout << "B2 = " << B2 << endl;

real Fexp = exp( B2 + sqrt(Tmax*B2) );
cout << "Fexp = exp( B2 + sqrt(Tmax*B2) ) = " << Fexp << endl;
real Fu0v0 = Fexp*(E0 + CteOmega*Tmax*B1^3 + CteOmega*Tmax*u0NormL1 );

cout << "Const. F(u0,v0) = " << Fu0v0 << endl;
cout << "CFL Theorem 3.1: C*k/h^2*F(u0,v0) = " << CteOmega*dt/(h*h) * Fu0v0 << endl;

// -----
// Plot

plot(u0, value=1, fill=1, dim=2, cmm="U0", wait=1, ColorScheme=1);
plot(v0, value=1, fill=1, dim=2, cmm="V0", wait=1, ColorScheme=2);

//bool plotToVTK = (getARGV("-vtk", 1) != 0);
int plotToVTK = getARGV("-vtk", 1);
if(plotToVTK) {
  string vtkFile="./" + testName + "_0.vtk";
  int[int] vtkOrder=[1, 1, 1];
  cout << "Saving " << vtkFile << endl;
  savevtk(vtkFile, Th, u0, v0, v0Laplacian, dataname="u v v0Lap", order=vtkOrder);
 }

//,---------------------------------------------------------------------
//| Variational problems
//`---------------------------------------------------------------------

// Quadrature formulae..................................................>
real[int,int] qfDataBaryc=[ // w_i, x_baric_i, y_baric_i
                             [1.,  1./3, 1./3] ];
real[int,int] qfDataNoBaryc=[ // w_i, x_baric_i, y_baric_i
                             [1.,  1./4, 1./4] ];

QF2 qfSpecial(1, qfDataBaryc);

// int barycenterQF = getARGV("-qfbaryc", 0);
// QF2 qfBaryc  (1, qfDataBaryc);
// QF2 qfNoBaryc(1, qfDataNoBaryc);
// QF2 qfSpecial;
// if(barycenterQF) {
//   qfSpecial = qfBaryc;
//  }
//  else {
//   qfSpecial = qfNoBaryc;
//  }

// Macro to select if special quadrature formula is selected
macro specialQuadOptions qft=qfSpecial // EOM
// macro specialQuadOptions qforder=2 // EOM
macro SOLVER sparsesolver // EOM
  ;

problem KellerSegelU(u, ub, solver=sparsesolver)=
  int2d(Th, qft=qf1pTlump)( u*ub ) +
  int2d(Th)( dt*k0 * grad(u)'*grad(ub) ) +
  int2d(Th)( -dt*k1 * u*grad(v0)'*grad(ub) )
  - int2d(Th, qft=qf1pTlump)( u0*ub )
  ;
problem KellerSegelV(v, vb, solver=sparsesolver)=
  int2d(Th, qft=qf1pTlump ) ( v*vb ) +
  int2d(Th) ( dt*k2 * grad(v)'*grad(vb) )
  + int2d(Th, qft=qf1pTlump) ( dt*k3 * v*vb )
  - int2d(Th, qft=qf1pTlump) ( dt*k4 * u*vb )
  - int2d(Th, qft=qf1pTlump) ( v0*vb )
  ;

//,---------------------------------------------------------------------
//| Time loop
//`---------------------------------------------------------------------

real uMax = 0, vMax=0;
real blowUpTolerance=1.e+10;

for (int k=1; k<=niter && uMax<blowUpTolerance && vMax<blowUpTolerance; k++) {
  t=t+dt;
  cout << "iter = " << k << "\t (t = " << t << ")" << endl;
  cout << "  number of vertices: " << Th.nv << endl;

  // Mesh adaptivity ····························································
  bool adaptMesh=getARGV("-adaptMesh", 0);
  if(adaptMesh) {
    Th = adaptmesh(Th, [u0, v0] , err=0.01, nbvx=500*nx*nx);
    plot(Th, wait=1);
    u = u;  // Seen in https://doc.freefem.org/tutorials/flowWithShocks.html
    v = v;  // Project in new mesh
  }
  // plot(Th, wait=1, ps="mesh_" + k + ".eps");

  // Solve system for u ······················································
  cout << "  computing u... " << endl;
  KellerSegelU;   // Compute u

  cout << "  computing v... " << endl;
  // Solve system for v ······················································
  KellerSegelV;   // Compute v

  // Post-process ····························································

  uMax = u[].max; real uMin=u[].min;
  vMax = v[].max; real vMin=v[].min;
  cout << "  max(u) = " << uMax << "  min(u) = " << uMin
       << (uMin<0 ? " ...---... Positivity broken!!!" : "") << endl;
  cout << "  max(v) = " << vMax << "  min(v) = " << vMin
       << (vMin<0 ? " ...---... (V) Positivity broken!!!" : "") << endl;

  real uInt = int2d(Th)(u);
  real vInt = int2d(Th)(v);
  cout << "  int_Th(u) = " << uInt
       << "  int_Th(v) = " << vInt
       << endl;

  plot(u, value=1, fill=1, dim=2, cmm="U", wait=1, ColorScheme=1);
  plot(v, value=1, fill=1, dim=2, cmm="V", wait=1, ColorScheme=2);

//  int vtkModule = getARGV("-vtk", 1); // Save to vtk each n iterations
  if(plotToVTK) {
    if(k % plotToVTK == 0) {
      string vtkFile="./" + testName + "_" + k + ".vtk";
      int[int] vtkOrder=[1, 1];
      cout << "  Saving " << vtkFile << endl;
      savevtk(vtkFile, Th, u, v, dataname="u v", order=vtkOrder);
    }
  }

  // Prepare next iteration
  u0 = u;
  v0 = v;

 }

if(uMax>=blowUpTolerance) cout << ">>>>> BLOW-UP FOUND at t = " << t
			       << " (uMax = " << uMax << ", blow-up tolerance = "
			       << blowUpTolerance << ")" << endl;
