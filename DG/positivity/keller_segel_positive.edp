// Problem (P):
// u_t - \mu \Delta u + b \cdot \grad u = 0   en \Omega,
// u = 0   sobre \partial\Omega x (0,t_f)
// u(\cdot,0)=u0 sobre \Omega
//
// We take:
//   * \Omega= unit circle,
//   * b(x1,x2) = [x2, -x1]
//   *  A=10, x0=0.3, y0=0.3 (e.g.)
//   * Initial condition u0 = exp( -A*( (x-x0)^2 + (y-y0)^2 ) )
verbosity=0;
load "iovtk";


//,---------------------------------------------------------------------
//| Mesh and finite elements
//`---------------------------------------------------------------------

//,---------------------------------------------------------------------
// Circle mesh
//`---------------------------------------------------------------------
real R=2;
border Gamma(t=0, 2*pi) { x=R*cos(t);  y=R*sin(t); };
int nx = 70;
mesh Th = buildmesh(Gamma(nx));
//,---------------------------------------------------------------------
// Square mesh
//`---------------------------------------------------------------------
// int nx = 30;
// mesh Th = square(nx, nx, [4*x-2, 4*y-2]);

fespace Uh(Th, P1dc);
Uh u, ub; // Unknown and test function
Uh u0;
fespace Vh(Th, P1);
Vh v, vb, v0;
real convectionFactor=40;
Uh b1 = convectionFactor*y, b2 = -convectionFactor*x;
macro b() [b1, b2] // EOM
  ;

//,---------------------------------------------------------------------
//| Time parameters
//`---------------------------------------------------------------------
real t = 0;
int niter = 300;
real dt = 1.e-3;

//,---------------------------------------------------------------------
//| Keller-Segel data
//`---------------------------------------------------------------------
real k0=1, k1=0.2, k2=1, k3=0.1, k4=1;
// real alpha=30, x0=0.3, y0=0.3;
// real alpha=20, x0=0.0, y0=0.0;
// func initialUGaussian = 300*exp( -alpha*( (x-x0)^2 + (y-y0)^2 ) );
// func initialURiemann = x<0;
// u0 = initialUGaussian;
// v0 = u0;
func initialU = 1.15*exp(-x^2-y^2)*(4-x^2)^2*(4-y^2)^2;
func initialV = 0.55*exp(-x^2-y^2)*(4-x^2)^2*(4-y^2)^2;
u0 = initialU;
v0 = initialV;

real integralU0=int2d(Th)(u0);
cout <<"La integral del dato inicial es "<< integralU0 << "(4*pi=" << 4*pi << ")" << endl;

//,---------------------------------------------------------------------
//| DG data
//`---------------------------------------------------------------------
real penaSIP = 4; // SIP DG interior penalty parameter
real eta = 1; // UPW parameter


//,---------------------------------------------------------------------
//| Variational problems
//`---------------------------------------------------------------------

// Macros..............................................................>
macro grad(u) [ dx(u), dy(u) ] // End of Macro
  ; // for emacs :)
macro div(u,v) ( dx(u) + dy(v) ) // End of Macro
  ; // for emacs :)
macro dn(u) ( N.x*dx(u) + N.y*dy(u) ) //  Normal derivative
  ; // for emacs :)
macro dotN(v) ( N.x*v[0] + N.y*v[1]) // (v1,v2) * (Normal Vector)
  ; // for emacs
macro intInteriorEdges(Th, expr) ( intalledges(Th)( real(nTonEdge-1)/nTonEdge * (expr) ) ) // EOM
  ; // for emacs
macro intAllEdges(Th, expr) ( intalledges(Th)( (expr) * 1/nTonEdge) ) // EOM
  ; // for emacs

// (Coninuous FEM) Keller Segel problem
problem KellerSegelU(u,ub)=
  int2d(Th)( u*ub/dt + k0*grad(u)'*grad(ub) )
  + int2d(Th)( - u0*ub/dt - k1*u0*grad(v)'*grad(ub) );
problem KellerSegelV(v,vb)=
  int2d(Th)( v*vb/dt + k2*grad(v)'*grad(vb) + k3*v*vb )
  + int2d(Th)( - v0*vb/dt - k4*u0*vb );


// Diffusion term (without Dirichlet b.c.) using SIP DG
NewMacro aSIP(coeff, u, ub)
  (
   int2d(Th)( coeff * grad(u)'*grad(ub) )  // Diffusion
   - intInteriorEdges(Th, (coeff) * (
				   mean(dn(u))*(-jump(ub))  +
				   (-jump(u))*mean(dn(ub))
				    ) )
   + intInteriorEdges(Th, (coeff) * (
		      penaSIP/lenEdge * jump(u)*jump(ub)
				) )
   ) EndMacro;

// Upwind convection
NewMacro aUPW(coeff, b, u, ub)
  (
   int2d(Th)( (coeff) * b'*grad(u) * ub )
   + intInteriorEdges(Th,
		      (coeff) * (
			- dotN(b) * (-jump(u)) * mean(ub)
			+ eta/2 *abs(dotN(b)) * jump(u)*jump(ub)
			) )
   ) EndMacro;
;


// Godunov flux convection
macro GodunovFlux(u, v, n) (v'*n*mean(u) - 0.5*abs(v'*n)*(-jump(u))) // EOM
  ;

NewMacro aGodunov(coeff, b, u, ub)
  (
   -int2d(Th)( (coeff) * u * (b'*grad(ub)) )
   + intInteriorEdges(Th,
		      (coeff) * (
			(dotN(b))*mean(u)*(-jump(ub))
			- 0.5*abs(dotN(b))*jump(u)*jump(ub)
			) )
   ) EndMacro;
;

// ....................................................................>

problem ConvectDiffImplicitEulerDG(u,ub) =
  int2d(Th) (u*ub/dt)
  + aUPW(1, b , u, ub)
  + aSIP(1, u, ub)
  - int2d(Th)(u0*ub/dt);

real theta; // if theta=0.5: Crank-Nicholson
problem ConvectDiffThetaSchemeDG(u,ub) =
  int2d(Th) (u*ub/dt)
  + aUPW( theta, b, u, ub )
  + aUPW( (1-theta), b, u0, ub )
  + aSIP( theta, u, ub )
  + aSIP( (1-theta), u0, ub )
  - int2d(Th)(u0*ub/dt);

// Bilinear form for variational formulation of convection
varf varfConvectThetaSchemeDG(u,ub) =
  int2d(Th) (u*ub/dt)
  + aUPW( theta, b, u, ub );

// Linear form for variational formulation of convection
// varf varfConvectThetaSchemeDG(unused,ub) =
//   int2d(Th)(u0*ub/dt)
//   + aUPW( -(1-theta), b, u0, ub ); // - aUPW in RHS

// Bilinear form for mass matrix
varf varfMassLump(u,ub) =
  int2d(Th, qft=qf1pTlump) (u*ub/dt);

// Bilinear form for convection matrix
varf varfConvectUPW(u, ub) =
  aUPW( 1, b, u, ub );

// Bilinear form for convection matrix
varf varfConvectGodunov(u, ub) =
  aGodunov( 1, b, u, ub );

varf varfDiffusionSIP(u, ub) =
  aSIP(1, u, ub);

// ---------------------------------------------------------------------
// Upwinding of the Transport matrix, K.
//
// Macro stores the result in the matrix Kupw.
//
// See "High-Order Local Maximum Principle Preserving (MPP)
// Discontinuous Galerkin Finite Element Method for the Transport
// Equation". R. Anderson, V. Dobrev, Tz. Kolev, D. Kuzmin, M. Quezada
// de Luna, R. Rieben and V. Tomov
// ---------------------------------------------------------------------
NewMacro upwindTransport(K, Kupw)
{
  int[int] I(1),J(1); real[int] C(1);
  [I,J,C]=K; // get the sparse terms of the matrix K (the arrays are resized)
  int n=K.n;
  int k=0;
  for(int i=0; i<n; i++) {
    Kupw(i,i) = K(i,i);
    // cout << "K_ii=" << Kupw(i,i) << endl;
    while(I[k]==i) {
      // cout << "k=" << k << endl;
      int j = J[k];
      if(i!=j) {
	real tmp = max(0.0, max(-K(i,j), -K(j,i)));  // max(0,-K(i,j), -K(j,i))1
	Kupw(i,j) = K(i,j) + tmp;
	Kupw(i,i) = Kupw(i,i) - tmp;
      }
      k++;
      if(k==I.n) break;
    }
  }
} EndMacro;
;

//,---------------------------------------------------------------------
//| Time loop
//`---------------------------------------------------------------------

// 1) Define matrix
matrix M = varfMassLump(Uh, Uh);   // Mass matrix
matrix S = varfDiffusionSIP(Uh,Uh); // Diffusion matrix

matrix Supw = S;
upwindTransport(S, Supw); // Perform upwinding and store result in Supw
matrix A;
bool explicitScheme=false;
if(explicitScheme) {
  A = M; // Explicit scheme
 }
 else {
   A = M + (-k0)*Supw; // Implicit scheme
 }

for (int k=1; k<=niter; k++) {
  t=t+dt;
  cout << "iter = " << k << "\t (t = " << t << ")" << endl;

  // Solve system for v ······················································
  KellerSegelV; // Compute v from u0
  // Compute negative advection vector (because scheme is for dt(v) - div(bv) = 0 )
  b1 = -dx(v);
  b2 = -dy(v);

  // Solve system for u ······················································

  // 1) Mount convection term
  matrix K = varfConvectGodunov(Uh, Uh); // Convection matrix
  matrix Kupw = K; // Upwinded convection matrix
  upwindTransport(K, Kupw); // Make upwinding into Kupw matrix
  if(!explicitScheme) {
    A = A + (-k1)*Kupw; // Implicit scheme
  }

  // 2) Define RHS
  real[int] F = M*u0[];
  // F += Supw*u0[];
  if(explicitScheme) {
    real [int] k0u = k0*u0[];
    F += Supw*k0u; // Explicit diffusion
    real [int] k1u = k1*u0[];
    F += Kupw*k1u; // Explicit convection
  }

  // 3) Solve system
  set(A, solver=UMFPACK);
  u[] = A^-1*F;

  // ···································································

  real uMax = u[].max; real uMin=u[].min;
  real vMax = v[].max; real vMin=v[].min;
  cout << "  max(u) = " << uMax << "  min(u) = " << uMin
       << (uMin<0 ? " ...---... Positivity broken!!!" : "") << endl;
  cout << "  max(v) = " << vMax << "  min(v) = " << vMin
       << (vMin<0 ? " ...---... (V) Positivity broken!!!" : "") << endl;
  cout << "  int_Th(u) = " << int2d(Th)(u) << endl;

  u0 = u;  // Prepare next iteration
  v0 = v;

  plot(v, value=1, fill=1, dim=3);

  bool plotToVTK=true; if(plotToVTK) {
    string vtkFile="/tmp/conv_diff_" + k + ".vtk";
    int[int] vtkOrder=[0];
    savevtk(vtkFile, Th, u, v, dataname="u v", order=vtkOrder);
  }


 }
